/* Generated by AN DISI Unibo */ 
package it.unibo.coapdispatcher

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Coapdispatcher ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		val interruptedStateTransitions = mutableListOf<Transition>()
		 var STATE = ws.Transporttrolleystate.IDLE  
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CoapObserverSupport(myself, "robotctx","8096","ctxrobot","transporttrolley")
						CoapObserverSupport(myself, "robotctx","8096","ctxrobot","basicrobotwrapper")
						CoapObserverSupport(myself, "robotctx","8096","ctxrobot","pickupdropouthandler")
						CoapObserverSupport(myself, "robotctx","8096","ctxrobot","mover")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t097",targetState="handleUpdate",cond=whenDispatch("coapUpdate"))
				}	 
				state("handleUpdate") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						if( checkMsgContent( Term.createTerm("coapUpdate(RESOURCE,VALUE)"), Term.createTerm("coapUpdate(RESOURCE,VALUE)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 val RESOURCE = payloadArg(0) 
												val VALUE = payloadArg(1)  
								println("coapdispatcher | update: ${payloadArg(0)} ${payloadArg(1)}")
								forward("coapUpdate", "coapUpdate($RESOURCE,$VALUE)" ,"transporttrolleystate" ) 
								forward("coapUpdate", "coapUpdate($RESOURCE,$VALUE)" ,"ledalarmcontrol" ) 
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t098",targetState="handleUpdate",cond=whenDispatch("coapUpdate"))
				}	 
			}
		}
}
