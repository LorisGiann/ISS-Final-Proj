/* Generated by AN DISI Unibo */ 
package it.unibo.sonarlorisdavide

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Sonarlorisdavide ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		val interruptedStateTransitions = mutableListOf<Transition>()
		 
				var simulate : Boolean = true
				val sonarActorName = name
				var active = false
				var init = false
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						if(  !init  
						 ){ 
										init=true
										AlarmConfig.loadConf()
										simulate = AlarmConfig.simulation 
						alarmSonar.configureSonarSubsystem.configureTheSonar( simulate, sonarActorName  )
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="activateTheSonar", cond=doswitch() )
				}	 
				state("activateTheSonar") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						updateResourceRep( "sonarlorisdavide(activateTheSonar,simulate)"  
						)
						if(  !init  
						 ){ 
										init=true
										AlarmConfig.loadConf()
										simulate = AlarmConfig.simulation 
						alarmSonar.configureSonarSubsystem.configureTheSonar( simulate, sonarActorName  )
						}
						if(  !active  
						 ){if(  simulate  
						 ){forward("sonaractivate", "info(ok)" ,"sonarsimulator" ) 
						}
						else
						 {forward("sonaractivate", "info(ok)" ,"sonardatasource" ) 
						 }
						 active=true  
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t076",targetState="handleSonarData",cond=whenEvent("alarmsonar"))
					transition(edgeName="t077",targetState="deactivateTheSonar",cond=whenDispatch("sonardeactivate"))
				}	 
				state("deactivateTheSonar") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						updateResourceRep( "sonarlorisdavide(deactivateTheSonar,simulate)"  
						)
						if(  active  
						 ){if(  simulate  
						 ){forward("sonardeactivate", "info(ok)" ,"sonarsimulator" ) 
						}
						else
						 {forward("sonardeactivate", "info(ok)" ,"sonardatasource" ) 
						 }
						 active=false  
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="end", cond=doswitch() )
				}	 
				state("handleSonarData") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						if( checkMsgContent( Term.createTerm("distance(V)"), Term.createTerm("distance(D)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 val D = payloadArg(0)  
								updateResourceRep( "sonarlorisdavide(handleSonarData,simulate,${D})"  
								)
								emit("local_sonardata", "distance($D)" ) 
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t078",targetState="handleSonarData",cond=whenEvent("alarmsonar"))
					transition(edgeName="t079",targetState="deactivateTheSonar",cond=whenDispatch("sonardeactivate"))
				}	 
				state("end") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						updateResourceRep( "sonarlorisdavide(end,simulate)"  
						)
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t080",targetState="activateTheSonar",cond=whenDispatch("sonaractivate"))
				}	 
			}
		}
}
