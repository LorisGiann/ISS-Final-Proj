/* Generated by AN DISI Unibo */ 
package it.unibo.wasteservice

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Wasteservice ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "wait"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		 lateinit var Material  : ws.Material
			   var TruckLoad : Float = 0F
		
			   lateinit var RES : String
			   lateinit var TrolleyPos : String   //gbox,pbox,Home,indoor
			   
			   lateinit var contPB : String
			   lateinit var contGB : String
		return { //this:ActionBasciFsm
				state("wait") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						updateResourceRep( "wasteservice(wait,${ws.func.contPB},${ws.func.contGB})"  
						)
						discardMessages = false
					}
					 transition(edgeName="t00",targetState="handle_req",cond=whenRequest("depositrequest"))
					transition(edgeName="t01",targetState="error",cond=whenDispatch("err"))
				}	 
				state("handle_req") { //this:State
					action { //it:State
						updateResourceRep( "wasteservice(handle_req,${ws.func.contPB},${ws.func.contGB})"  
						)
						println("$name in ${currentState.stateName} | $currentMsg")
						if( checkMsgContent( Term.createTerm("depositrequest(MATERIAL,TRUCKLOAD)"), Term.createTerm("depositrequest(MATERIAL,TRUCKLOAD)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												 Material 	= ws.Material.valueOf(payloadArg(0))
												 TruckLoad 	= payloadArg(1).toFloat()
								println("wasteservice | arrived $TruckLoad Kg of $Material")
								if(  ws.func.checkdepositpossible( Material, TruckLoad )  
								 ){ ws.func.updateDeposit( Material, TruckLoad ) 
									
												contPB = ${ws.func.contPB}
												contGB = ${ws.func.contGB}
								emit("update_container", "update_container(contPB,contGB)" ) 
								println("wasteservice | PB capacity: ${ws.func.contPB}, GB capacity: ${ws.func.contGB}")
								 RES="OK" 
								}
								else
								 { RES="ERR"  
								 }
						}
					}
					 transition( edgeName="goto",targetState="req_depositaction", cond=doswitchGuarded({ RES=="OK"  
					}) )
					transition( edgeName="goto",targetState="rejected", cond=doswitchGuarded({! ( RES=="OK"  
					) }) )
				}	 
				state("rejected") { //this:State
					action { //it:State
						println("wasteservice | rejected")
						updateResourceRep( "wasteservice(rejected,${ws.func.contPB},${ws.func.contGB})"  
						)
						println("$name in ${currentState.stateName} | $currentMsg")
						answer("depositrequest", "loadrejected", "loadrejected($Material,$TruckLoad)"   )  
					}
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
				state("req_depositaction") { //this:State
					action { //it:State
						println("wasteservice | req_depositaction")
						updateResourceRep( "wasteservice(req_depositaction,${ws.func.contPB},${ws.func.contGB})"  
						)
						println("$name in ${currentState.stateName} | $currentMsg")
						request("depositaction", "depositaction($Material)" ,"depositaction" )  
					}
					 transition(edgeName="t02",targetState="chk_depositaction",cond=whenReply("pickupdone"))
					transition(edgeName="t03",targetState="error",cond=whenDispatch("err"))
				}	 
				state("chk_depositaction") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						updateResourceRep( "wasteservice(chk_depositaction,${ws.func.contPB},${ws.func.contGB})"  
						)
						answer("depositrequest", "loadaccept", "loadaccept($Material,$TruckLoad)"   )  
					}
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
				state("error") { //this:State
					action { //it:State
						updateResourceRep( "wasteservice(error,${ws.func.contPB},${ws.func.contGB})"  
						)
						println("wasteservice | error")
						println("$name in ${currentState.stateName} | $currentMsg")
					}
				}	 
			}
		}
}
