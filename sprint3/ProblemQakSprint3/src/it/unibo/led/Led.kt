/* Generated by AN DISI Unibo */ 
package it.unibo.led

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Led ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		val interruptedStateTransitions = mutableListOf<Transition>()
		 var ledM : `it.unibo`.radarSystem22.domain.interfaces.ILed? = null
				var newState : ws.LedState? = null
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						discardMessages = true
						println("$name in ${currentState.stateName} | $currentMsg")
						updateResourceRep( "led(initial,OFF)"  
						)
						if(  ledM == null  
						 ){ 
										AlarmConfig.loadConf()
										//`it.unibo`.radarSystem22.domain.utils.DomainSystemConfig.ledGui = true
										//`it.unibo`.radarSystem22.domain.utils.DomainSystemConfig.simulation = true
										ledM = `it.unibo`.radarSystem22.domain.models.LedModel.create().also{ it.turnOff() } 
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t076",targetState="handle_update",cond=whenEvent("update_led"))
				}	 
				state("handle_update") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						if( checkMsgContent( Term.createTerm("update_led(LEDSTATE)"), Term.createTerm("update_led(ARG)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 newState = ws.LedState.valueOf(payloadArg(0))  
								if(  ledM == null  
								 ){ 
													AlarmConfig.loadConf()
													//`it.unibo`.radarSystem22.domain.utils.DomainSystemConfig.ledGui = true
													//`it.unibo`.radarSystem22.domain.utils.DomainSystemConfig.simulation = true
													ledM = `it.unibo`.radarSystem22.domain.models.LedModel.create().also{ it.turnOff() } 
								}
						}
						updateResourceRep( "led(handle_update,${newState})"  
						)
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="off", cond=doswitchGuarded({ newState==ws.LedState.OFF  
					}) )
					transition( edgeName="goto",targetState="handle_update_switch_1", cond=doswitchGuarded({! ( newState==ws.LedState.OFF  
					) }) )
				}	 
				state("handle_update_switch_1") { //this:State
					action { //it:State
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="on", cond=doswitchGuarded({ newState==ws.LedState.ON  
					}) )
					transition( edgeName="goto",targetState="handle_update_switch_2", cond=doswitchGuarded({! ( newState==ws.LedState.ON  
					) }) )
				}	 
				state("handle_update_switch_2") { //this:State
					action { //it:State
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="blink_on", cond=doswitchGuarded({ newState==ws.LedState.BLINK  
					}) )
					transition( edgeName="goto",targetState="s0", cond=doswitchGuarded({! ( newState==ws.LedState.BLINK  
					) }) )
				}	 
				state("off") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						updateResourceRep( "led(off,${newState})"  
						)
						 unibo.actor22comm.utils.ColorsOut.outappl("${name} - off", unibo.actor22comm.utils.ColorsOut.GREEN) 
						 ledM!!.turnOff() 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t077",targetState="handle_update",cond=whenEvent("update_led"))
				}	 
				state("on") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						updateResourceRep( "led(on,${newState})"  
						)
						 unibo.actor22comm.utils.ColorsOut.outappl("${name} - on", unibo.actor22comm.utils.ColorsOut.GREEN) 
						 ledM!!.turnOn() 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t078",targetState="handle_update",cond=whenEvent("update_led"))
				}	 
				state("blink_on") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						updateResourceRep( "led(blink_on,${newState})"  
						)
						 unibo.actor22comm.utils.ColorsOut.outappl("${name} - on (blinking)", unibo.actor22comm.utils.ColorsOut.GREEN) 
						 ledM!!.turnOn() 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
				 	 		//sysaction { //it:State
				 	 		  stateTimer = TimerActor("timer_blink_on", 
				 	 			scope, context!!, "local_tout_led_blink_on", 250.toLong() )
				 	 		//}
					}	 	 
					 transition(edgeName="t079",targetState="blink_off",cond=whenTimeout("local_tout_led_blink_on"))   
					transition(edgeName="t080",targetState="handle_update",cond=whenEvent("update_led"))
				}	 
				state("blink_off") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						updateResourceRep( "led(blink_off,${newState})"  
						)
						 unibo.actor22comm.utils.ColorsOut.outappl("${name} - off (blinking)", unibo.actor22comm.utils.ColorsOut.GREEN) 
						 ledM!!.turnOff() 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
				 	 		//sysaction { //it:State
				 	 		  stateTimer = TimerActor("timer_blink_off", 
				 	 			scope, context!!, "local_tout_led_blink_off", 250.toLong() )
				 	 		//}
					}	 	 
					 transition(edgeName="t081",targetState="blink_on",cond=whenTimeout("local_tout_led_blink_off"))   
					transition(edgeName="t082",targetState="handle_update",cond=whenEvent("update_led"))
				}	 
			}
		}
}
