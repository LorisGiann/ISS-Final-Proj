/* Generated by AN DISI Unibo */ 
package it.unibo.led

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Led ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		 lateinit var newState : String  
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						discardMessages = true
					}
					 transition(edgeName="t00",targetState="handle_update",cond=whenEvent("update_led"))
				}	 
				state("handle_update") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						if( checkMsgContent( Term.createTerm("update_led(STATE)"), Term.createTerm("update_led(ARG)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 newState = payloadArg(0)  
								println("update_led(${newState})")
								 val actor = this@Led; 
								 				var res = false;
								 when(newState) {
									 					"off" -> res=actor.handleCurrentMessage(NoMsg,actor.getStateByName("off"))
									 					"on" -> res=actor.handleCurrentMessage(NoMsg,actor.getStateByName("on"))
									 					"blink" -> res=actor.handleCurrentMessage(NoMsg,actor.getStateByName("blink_on"))
									 			   }
											   if(res) actor.elabMsgInState( );
						}
					}
				}	 
				state("off") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						println("Led off")
					}
					 transition(edgeName="t01",targetState="handle_update",cond=whenEvent("update_led"))
				}	 
				state("on") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						println("Led on")
					}
					 transition(edgeName="t02",targetState="handle_update",cond=whenEvent("update_led"))
				}	 
				state("blink_on") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						println("Blinking on")
						stateTimer = TimerActor("timer_blink_on", 
							scope, context!!, "local_tout_led_blink_on", 500.toLong() )
					}
					 transition(edgeName="t03",targetState="blink_off",cond=whenTimeout("local_tout_led_blink_on"))   
					transition(edgeName="t04",targetState="handle_update",cond=whenEvent("update_led"))
				}	 
				state("blink_off") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						println("Blinking off")
						stateTimer = TimerActor("timer_blink_off", 
							scope, context!!, "local_tout_led_blink_off", 500.toLong() )
					}
					 transition(edgeName="t05",targetState="blink_on",cond=whenTimeout("local_tout_led_blink_off"))   
					transition(edgeName="t06",targetState="handle_update",cond=whenEvent("update_led"))
				}	 
			}
		}
}
