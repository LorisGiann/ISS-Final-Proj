/* Generated by AN DISI Unibo */ 
package it.unibo.ledcommander

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Ledcommander ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		val interruptedStateTransitions = mutableListOf<Transition>()
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						emit("update_led", "update_led(ON)" ) 
						stateTimer = TimerActor("timer_s0", 
							scope, context!!, "local_tout_ledcommander_s0", 1000.toLong() )
					}
					 transition(edgeName="t00",targetState="s1",cond=whenTimeout("local_tout_ledcommander_s0"))   
				}	 
				state("s1") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						emit("update_led", "update_led(BLINK)" ) 
						stateTimer = TimerActor("timer_s1", 
							scope, context!!, "local_tout_ledcommander_s1", 1000.toLong() )
					}
					 transition(edgeName="t01",targetState="s2",cond=whenTimeout("local_tout_ledcommander_s1"))   
				}	 
				state("s2") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						emit("update_led", "update_led(OFF)" ) 
						stateTimer = TimerActor("timer_s2", 
							scope, context!!, "local_tout_ledcommander_s2", 1000.toLong() )
					}
					 transition(edgeName="t02",targetState="s0",cond=whenTimeout("local_tout_ledcommander_s2"))   
				}	 
			}
		}
}
