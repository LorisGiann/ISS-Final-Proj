/* Generated by AN DISI Unibo */ 
package it.unibo.alarmemitter

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Alarmemitter ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		val interruptedStateTransitions = mutableListOf<Transition>()
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
					}
					 transition(edgeName="t074",targetState="handle_sonardata",cond=whenEvent("local_sonardata"))
				}	 
				state("handle_sonardata") { //this:State
					action { //it:State
						emit("alarm", "alarm(_)" ) 
						emit("alarmceased", "alarmceased(_)" ) 
					}
				}	 
			}
		}
}
