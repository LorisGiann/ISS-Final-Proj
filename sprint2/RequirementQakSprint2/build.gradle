/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn more about Gradle by exploring our samples at https://docs.gradle.org/7.4/samples
 */
/*
================================================================================
build.gradle
GENERATED ONLY ONCE
================================================================================
*/
plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'java'
    id 'eclipse'

    // Apply the org.jetbrains.kotlin.jvm Plugin to add support for Kotlin.
    id 'org.jetbrains.kotlin.jvm' version "$kotlinVersion"
}

version '1.0'
sourceCompatibility = 11

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
    flatDir {   dirs '../../unibolibs'	 }
}

dependencies {
    // Align versions of all Kotlin components
    implementation platform('org.jetbrains.kotlin:kotlin-bom')

    // Use the Kotlin JDK 8 standard library.
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'

    // This dependency is used by the application.
    implementation 'com.google.guava:guava:30.1.1-jre'

    // Use the Kotlin test library.
    testImplementation 'org.jetbrains.kotlin:kotlin-test'
    // Use the Kotlin JUnit integration.
    testImplementation 'org.jetbrains.kotlin:kotlin-test-junit5'

    /* COROUTINES ********************************************************************************************************** */
    // https://mvnrepository.com/artifact/org.jetbrains.kotlinx/kotlinx-coroutines-core
    implementation group: 'org.jetbrains.kotlinx', name: 'kotlinx-coroutines-core', version: "$kotlinVersion"//, ext: 'pom'
    // https://mvnrepository.com/artifact/org.jetbrains.kotlinx/kotlinx-coroutines-core-jvm
    implementation group: 'org.jetbrains.kotlinx', name: 'kotlinx-coroutines-core-jvm', version: "$kotlinVersion"

    /*  MQTT *************************************************************************************************************** */
    // https://mvnrepository.com/artifact/org.eclipse.paho/org.eclipse.paho.client.mqttv3
    implementation group: 'org.eclipse.paho', name: 'org.eclipse.paho.client.mqttv3', version: '1.2.5'

    /* JSON **************************************************************************************************************** */
    // https://mvnrepository.com/artifact/org.json/json
    implementation group: 'org.json', name: 'json', version: '20220320'

    /* COAP **************************************************************************************************************** */
    // https://mvnrepository.com/artifact/org.eclipse.californium/californium-core
    implementation group: 'org.eclipse.californium', name: 'californium-core', version: '3.5.0'
    // https://mvnrepository.com/artifact/org.eclipse.californium/californium-proxy2
    implementation group: 'org.eclipse.californium', name: 'californium-proxy2', version: '3.5.0'

//OkHttp library for websockets with Kotlin
	//implementation group: 'com.squareup.okhttp3', name: 'okhttp', version: '3.14.0'    
	implementation group: 'com.squareup.okhttp3', name: 'okhttp', version: '4.9.3' 
	// https://mvnrepository.com/artifact/com.squareup.okhttp3/mockwebserver
	testImplementation group: 'com.squareup.okhttp3', name: 'mockwebserver', version: '4.9.3'

    /* LOG4J *************************************************************************************************************** */
    // https://mvnrepository.com/artifact/org.slf4j/slf4j-reload4j
    implementation group: 'org.slf4j', name: 'slf4j-reload4j', version: '2.0.0-alpha7'

    /* HTTP **************************************************************************************************************** */
    // https://mvnrepository.com/artifact/org.apache.httpcomponents/httpclient
    implementation group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.13'
    // https://mvnrepository.com/artifact/commons-io/commons-io
    implementation group: 'commons-io', name: 'commons-io', version: '2.11.0'

    /* UNIBO *************************************************************************************************************** */
    implementation name: 'uniboInterfaces'
    implementation name: '2p301'
    implementation name: 'it.unibo.qakactor-2.7'
    implementation name: 'unibo.comm22-1.1'
    implementation name: 'unibonoawtsupports'  //required by the old infrastructure
	implementation name: 'unibo.actor22-1.1'

    /* AIMA **************************************************************************************************************** */
 	//PLANNER  
    implementation name: 'unibo.planner22-1.0'
    // https://mvnrepository.com/artifact/com.googlecode.aima-java/aima-core
    implementation group: 'com.googlecode.aima-java', name: 'aima-core', version: '3.0.0'

}

test {
    useJUnitPlatform()
}

sourceSets {
    main.java.srcDirs += 'src'
    main.java.srcDirs += 'resources'
    test.java.srcDirs += 'test'		//test is specific
}
  

eclipse {
    classpath {
        sourceSets -= [sourceSets.main, sourceSets.test]	
    }	
 }


application {
    // Define the main class for the application.
    mainClass = 'it.unibo.ctxserver.MainCtxserverKt'
}

test {
    useJUnitPlatform()
}

//generate
//  gradle -PmainClass=it.unibo.ctxrobot.MainCtxrobotKt jar
//run
//  java -jar build/libs/it.unibo.ctxrobot.MainCtxrobotKt-1.0.jar
jar {
    from sourceSets.main.allSource
    String main = project.findProperty('mainClass')
    if (main==null) {
  		println("NULL")
  		manifest {
	        attributes 'Main-Class': "$mainClassName"
	    }
	}else{
		println(main)
		manifest {
			attributes 'Main-Class': main
		}
		baseName = main
	    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
	    from (configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }) {
	        exclude 'META-INF/MANIFEST.MF'
	        exclude 'META-INF/*.SF'
	        exclude 'META-INF/*.DSA'
	        exclude 'META-INF/*.RSA'
	    }
	}
}


//task run:
//	gradle -PmainClass=it.unibo.ctxrobot.MainCtxrobotKt execute
//should the process not end, you can free the port by killing it:
//	sudo kill -9 $( sudo ss -ntlp | grep 8095 | awk -F 'pid=' '{ print $2 }' | cut -d',' -f1 )
task execute(type:JavaExec) {
    description = "Run the other context with ExecTask"
    //main = project.hasProperty("mainClass") ? getProperty("mainClass") : "NULL"   //getProperty("mainClass") doesnt work !!
    main = project.findProperty('mainClass')
    classpath = sourceSets.main.runtimeClasspath
}

/**
 * Prints value of property "rootProject.name" to stdout.
 *
 * Usage: ./gradlew -q print
 */
task print {
  doLast {
    println(project.findProperty('mainClass').name)
  }
}
 
