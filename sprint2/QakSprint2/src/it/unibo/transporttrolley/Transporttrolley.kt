/* Generated by AN DISI Unibo */ 
package it.unibo.transporttrolley

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Transporttrolley ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "init"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		 val actor = this@Transporttrolley;
				suspend fun transitNow(stateName : String){
					var res = actor.handleCurrentMessage(NoMsg,actor.getStateByName(stateName));
					if(res) actor.elabMsgInState( );
					else println("ERROR: transition was not possible")
				}
			   var dest = ws.Position.HOME
			   var currpos = ws.Position.HOME
		return { //this:ActionBasciFsm
				state("init") { //this:State
					action { //it:State
						discardMessages = false
						 dest = ws.Position.HOME
							       currpos = ws.Position.HOME
					}
					 transition( edgeName="goto",targetState="wait_check_disable", cond=doswitch() )
				}	 
				state("wait_check_disable") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						updateResourceRep( "transporttrolley(wait_check_disable,$currpos,$dest)"  
						)
						stateTimer = TimerActor("timer_wait_check_disable", 
							scope, context!!, "local_tout_transporttrolley_wait_check_disable", 10.toLong() )
					}
					 transition(edgeName="t018",targetState="wait",cond=whenTimeout("local_tout_transporttrolley_wait_check_disable"))   
					transition(edgeName="t019",targetState="halt",cond=whenDispatch("disable"))
				}	 
				state("halt") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						updateResourceRep( "transporttrolley(halt,$currpos,$dest)"  
						)
					}
					 transition(edgeName="toNewState20",targetState="wait_check_disable",cond=whenDispatch("enable"))
				}	 
				state("wait") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						updateResourceRep( "transporttrolley(wait,$currpos,$dest)"  
						)
						println("transporttrolley | Wait (Dest: ${dest} CurrPos: ${currpos})")
						 val F = currpos 
								   val T = dest 
						emit("moving", "moving($F,$T)" ) 
						if(  currpos!=dest  
						 ){println("instant transition")
						 transitNow("forward_robot")  
						}
					}
					 transition(edgeName="toNewState21",targetState="picking_up",cond=whenRequestGuarded("pickup",{ currpos==dest 
					}))
					transition(edgeName="toNewState22",targetState="dropping_down",cond=whenRequestGuarded("dropout",{ currpos==dest 
					}))
					transition(edgeName="toNewState23",targetState="set_new_dest",cond=whenRequestGuarded("move",{ currpos==dest 
					}))
					transition(edgeName="toNewState24",targetState="halt",cond=whenDispatch("disable"))
				}	 
				state("forward_halt") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						updateResourceRep( "transporttrolley(forward_halt,$currpos,$dest)"  
						)
						forward("cmd", "cmd(h)" ,"basicrobot" ) 
					}
					 transition(edgeName="toNewState25",targetState="forward_robot",cond=whenDispatch("enable"))
					transition(edgeName="toNewState26",targetState="turn",cond=whenEvent("info"))
				}	 
				state("picking_up") { //this:State
					action { //it:State
						updateResourceRep( "transporttrolley(picking_up,$currpos,$dest)"  
						)
						println("transporttrolley | PickUp material from truck")
						delay(1000) 
						answer("pickup", "pickupanswer", "pickupanswer(OK)"   )  
					}
					 transition( edgeName="goto",targetState="wait_check_disable", cond=doswitch() )
				}	 
				state("dropping_down") { //this:State
					action { //it:State
						updateResourceRep( "transporttrolley(dropping_down,$currpos,$dest)"  
						)
						println("transporttrolley | DropOut material in container")
						delay(1000) 
						answer("dropout", "dropoutanswer", "dropoutanswer(OK)"   )  
					}
					 transition( edgeName="goto",targetState="wait_check_disable", cond=doswitch() )
				}	 
				state("set_new_dest") { //this:State
					action { //it:State
						updateResourceRep( "transporttrolley(set_new_dest,$currpos,$dest)"  
						)
						if( checkMsgContent( Term.createTerm("move(POSITION)"), Term.createTerm("move(ARG)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 dest=ws.Position.valueOf(payloadArg(0))  
								 val F = currpos 
											   val T = dest 
								println("transporttrolley | New robot destination: ${dest}")
								emit("moving", "moving($F,$T)" ) 
						}
					}
					 transition( edgeName="goto",targetState="wait_check_disable", cond=doswitch() )
				}	 
				state("forward_robot") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						updateResourceRep( "transporttrolley(forward_robot,$currpos,$dest)"  
						)
						forward("cmd", "cmd(w)" ,"basicrobot" ) 
					}
					 transition(edgeName="t127",targetState="turn",cond=whenEvent("info"))
					transition(edgeName="t128",targetState="forward_halt",cond=whenDispatch("disable"))
				}	 
				state("turn") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						updateResourceRep( "transporttrolley(turn,$currpos,$dest)"  
						)
						currpos=ws.func.nextPosition(currpos)  
						forward("cmd", "cmd(l)" ,"basicrobot" ) 
						delay(450) 
						if(  currpos==dest  
						 ){println("transporttrolley | Robot arrived at $currpos")
						answer("move", "moveanswer", "moveanswer(OK)"   )  
						}
					}
					 transition( edgeName="goto",targetState="wait_check_disable", cond=doswitch() )
				}	 
			}
		}
}
