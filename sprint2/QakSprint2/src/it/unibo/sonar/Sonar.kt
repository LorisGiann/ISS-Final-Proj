/* Generated by AN DISI Unibo */ 
package it.unibo.sonar

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Sonar ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		 val simulate       = true
			   val sonarActorName = "sonar"
			   val usingDomain    = false
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						sonarConfig.configureTheSonar( simulate, sonarActorName, usingDomain  )
					}
					 transition(edgeName="t036",targetState="activateTheSonar",cond=whenDispatch("sonaractivate"))
					transition(edgeName="t037",targetState="deactivateTheSonar",cond=whenDispatch("sonardeactivate"))
				}	 
				state("activateTheSonar") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						println("activate the sonar")
						if(   `it.unibo`.radarSystem22.domain.utils.DomainSystemConfig.simulation  
						 ){println("sonar simulator")
						updateResourceRep( "sonaractivate"  
						)
						forward("sonaractivate", "info(ok)" ,"sonarsimulatortesting" ) 
						}
						else
						 {println("sonar real")
						 forward("sonaractivate", "info(ok)" ,"sonardatasource" ) 
						 }
					}
					 transition(edgeName="t038",targetState="handleSonarData",cond=whenEvent("sonardistance"))
					transition(edgeName="t039",targetState="deactivateTheSonar",cond=whenDispatch("sonardeactivate"))
				}	 
				state("deactivateTheSonar") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
					}
					 transition( edgeName="goto",targetState="end", cond=doswitch() )
				}	 
				state("handleSonarData") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("sonar(DISTANCE,NAME)"), Term.createTerm("distance(D)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 val D = payloadArg(0)  
								updateResourceRep( "Distance ${D}"  
								)
								println("Distance ${D}")
								emit("sonardata", "distance($D)" ) 
						}
					}
					 transition(edgeName="t040",targetState="handleSonarData",cond=whenEvent("sonardistance"))
					transition(edgeName="t041",targetState="deactivateTheSonar",cond=whenDispatch("sonardeactivate"))
				}	 
				state("end") { //this:State
					action { //it:State
						println("sonarqak22 BYE")
						updateResourceRep( "sonardeactivate"  
						)
						 System.exit(0)  
					}
				}	 
			}
		}
}
