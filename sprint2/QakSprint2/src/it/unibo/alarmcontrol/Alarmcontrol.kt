/* Generated by AN DISI Unibo */ 
package it.unibo.alarmcontrol

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Alarmcontrol ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "init"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		 var F: String = "HOME"
			   var T: String = "HOME"
			   var ISHOME: Boolean = true
			   val DLIMIT: Int = 10
			   var DISABLE: Boolean = false
			   		
			   fun checkIsHome(F: String, T: String) : Boolean {
			       return F==T;
			   }	   
		return { //this:ActionBasciFsm
				state("init") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						println("Activate the sonar")
						updateResourceRep( "alarmcontrol(activateSonar)"  
						)
						forward("sonaractivate", "info(ok)" ,"sonar" ) 
					}
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
				state("wait") { //this:State
					action { //it:State
						println("wait")
					}
					 transition(edgeName="t035",targetState="handle_moving",cond=whenEvent("moving"))
					transition(edgeName="t036",targetState="handle_distance",cond=whenEvent("sonardata"))
				}	 
				state("handle_moving") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("moving(F,T)"), Term.createTerm("moving(F,T)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 F = payloadArg(0)    
								 T = payloadArg(1)    
								 ISHOME=checkIsHome(F,T)  
								updateResourceRep( "alarmcontrol(handle_moving,${F},${T},${DISABLE})"  
								)
								if(  ISHOME==true  
								 ){println("led off")
								emit("update_led", "update_led(off)" ) 
								}
								else
								 {println("led blink")
								 emit("update_led", "update_led(blink)" ) 
								 }
						}
					}
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
				state("handle_distance") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("distance(V)"), Term.createTerm("distance(D)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 val D = payloadArg(0).toInt()  
								if(  ISHOME==false && D<DLIMIT 
								 ){emit("update_led", "update_led(on)" ) 
								println("led on")
								}
								if(  ISHOME==false && D>=DLIMIT 
								 ){println("led blink")
								emit("update_led", "update_led(blink)" ) 
								}
								updateResourceRep( "alarmcontrol(handle_distance,${F},${T},${DISABLE},${D})"  
								)
								if(  D<DLIMIT 
								 ){ DISABLE=true  
								forward("disable", "disable(_)" ,"transporttrolley" ) 
								}
								if(  D>=DLIMIT && DISABLE==true   
								 ){ DISABLE=false  
								forward("enable", "enable(_)" ,"transporttrolley" ) 
								}
						}
					}
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
			}
		}
}
