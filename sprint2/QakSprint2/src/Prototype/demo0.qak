//https://dl.bintray.com/jetbrains/kotlin/eclipse-plugin/0.8.19/
  
System demo0    
//mqttBroker "localhost" : 1883 eventTopic "demo0/events"
//mqttBroker "broker.hivemq.com" : 1883 eventTopic "demo0/events"
  
// ------------ wasteservice msgs --------------------
//MATERIAL = PLASTIC | GLASS
//TRUCKLOAD =  float number
Request depositrequest : depositrequest(MATERIAL, TRUCKLOAD)
Reply loadaccept       : loadaccept(MATERIAL, TRUCKLOAD)
Reply loadrejected     : loadrejected(MATERIAL, TRUCKLOAD)
// ------------------------------------------------------
   
// ------------ transporttrolley msgs -------------------
//RESULT =  OK | ERROR 
Request pickup         : pickup(_)
Reply   pickupanswer   : pickupanswer(RESULT)
Request dropout        : dropout(_)
Reply   dropoutanswer  : dropoutanswer(RESULT)
Request move           : move(POSITION)    //POSITION = INDOOR | PLASTICBOX | GLASSBOX | HOME
Reply   moveanswer     : moveanswer(RESULT)
// ------------------------------------------------------
// --------------- depositaction msgs -------------------
Request depositaction  : depositaction(MATERIAL) 
Reply   pickupdone	   : pickupdone(_)
Dispatch err		   : err(_)
// ------------------------------------------------------

// --------------- basicrobotwrapper msgs ---------------
//RESULT =  OK | ERROR 
//MOVE =  w | a | s | d | h     //the command end when the reply is sent
Request cmdsync   	: cmdsync(MOVE)
Reply cmdanswer   	: cmdanswer(RESULT)
// ------------------------------------------------------

// ------------------ basicrobot msgs -------------------
//MOVE =  w | a | s | d | h    //w and s: the robot continues to go until an obstacle is found
Dispatch cmd       	: cmd(MOVE)
Dispatch end       	: end(ARG)
 
Request step       : step( TIME )	
Reply   stepdone   : stepdone(V)  
Reply   stepfail   : stepfail(DURATION, CAUSE)
 
 
Event 	 moving 	   : moving (F,T)
Event    info          : info( ARG ) 	    //for external components, not coap-observed
Event    sonar         : sonar(DISTANCE,NAME)			//emitted by distancefilter
Dispatch obstacle      : obstacle( ARG ) 	//generated by distancefilter
// ------------------------------------------------------

//--------- alarm receiver for mover and pickupdropdownhandler --------- 
Dispatch enable			 : enable(_)
Dispatch disable		 : disable(_)
//-----------------------------------------------------------------------

//-------- alarm control robot --------
//BOOL = TRUE | FALSE
Event disable : disable(BOOL)
//-------------------------------------

//SONAR
Dispatch sonaractivate   : info(ARG)
Dispatch sonardeactivate : info(ARG)
Event    sonardistance   : distance( V )   //emitted by sonarSimulator or sonardatasource
Event    sonardata       : distance( V )   //for the application level	
Event    obstacle        : obstacle( D )   //for the application level




// ------------------ CONTEXTS -------------------
//REMEMBER TO PUT datacleaner AND distancefilter IN THE SAME CONTEXT OF basicrobot
Context ctxserver ip [host="localhost" port=8095]
Context ctxrobot ip  [host="127.0.0.1" port=8096]
Context ctxalarm ip  [host="127.0.0.1" port=8097]
// ------------------------------------------------

// ------- basicrobot collision detection ---------
CodedQActor distancefilter context ctxrobot className "rx.distanceFilter"   //Nel caso di robot virtuale semplicemente assorbe eventi obstacle e reinvia dispatch "obstacle:obstacle(virtual)" a basicrobot. Nel caso di robot reali riceve messaggi "sonarRobot" e invia a basicrobot dispatch "obstacle:obstacle(dist)" se vicino, altrimenti sonardata", "sonardata:distance(dist)" se lontano.
// ------------------------------------------------

CodedQActor sonarsimulator     context ctxalarm className "alarmSonar.sonarSimulator"
CodedQActor sonardatasource    context ctxalarm className "alarmSonar.sonarHCSR04Support2021"
CodedQActor datacleaner        context ctxalarm className "alarmSonar.dataCleaner"


QActor wasteservice context ctxserver{
	[# lateinit var Material  : ws.Material
	   var TruckLoad : Float = 0F

	   lateinit var RES : String
	   lateinit var TrolleyPos : String   //gbox,pbox,Home,indoor
	#]
	
	State wait initial {
			printCurrentMessage
			updateResource [# "wasteservice(wait,${ws.func.contPB},${ws.func.contGB})" #]
			discardMsg Off
	}
	Transition t0 whenRequest depositrequest -> handle_req
				  whenMsg   err -> error
	
	State handle_req{
		updateResource [# "wasteservice(handle_req,${ws.func.contPB},${ws.func.contGB})" #] 
		printCurrentMessage
		onMsg(depositrequest : depositrequest(MATERIAL, TRUCKLOAD)) {
			[#
				 Material 	= ws.Material.valueOf(payloadArg(0))
				 TruckLoad 	= payloadArg(1).toFloat()
			#]
			println("wasteservice | arrived $TruckLoad Kg of $Material")
			if[# ws.func.checkdepositpossible( Material, TruckLoad ) #]{
				[# ws.func.updateDeposit( Material, TruckLoad ) 
					#]
				println("wasteservice | PB capacity: ${ws.func.contPB}, GB capacity: ${ws.func.contGB}")	
				[# RES="OK"#]
			} else{  
				[# RES="ERR" #]
			}		
		} 
	}
	Goto req_depositaction if [# RES=="OK" #] else rejected
	
	State rejected{
		println("wasteservice | rejected")
		updateResource [# "wasteservice(rejected,${ws.func.contPB},${ws.func.contGB})" #]
		printCurrentMessage
 		replyTo depositrequest with loadrejected : loadrejected($Material,$TruckLoad)
	}
	Goto wait
	
	State req_depositaction{
		println("wasteservice | req_depositaction")
		updateResource [# "wasteservice(req_depositaction,${ws.func.contPB},${ws.func.contGB})" #]
		printCurrentMessage
		request depositaction -m depositaction : depositaction($Material)
	}
	Transition t0 whenReply pickupdone -> chk_depositaction
				  whenMsg   err -> error
	
	State chk_depositaction{
		printCurrentMessage
		updateResource [# "wasteservice(chk_depositaction,${ws.func.contPB},${ws.func.contGB})" #]
		replyTo depositrequest with loadaccept : loadaccept($Material,$TruckLoad)	
	}
	Goto wait
	
	
 	State error {
 		updateResource [# "wasteservice(error,${ws.func.contPB},${ws.func.contGB})" #] 
 		println("wasteservice | error")
 		printCurrentMessage
 	}
}

QActor depositaction context ctxserver{
	[# lateinit var RES : String
	   lateinit var MATERIAL : ws.Material #]
	
	State error {
		updateResource [# "depositaction(error)" #] 
 		println("depositaction | error")
 		printCurrentMessage
 		forward wasteservice -m err : err(_)
	}
	
	State wait initial{
		updateResource [# "depositaction(wait)" #] 
		printCurrentMessage
		discardMsg Off
	}
	Transition t0 whenRequest depositaction -> req_move_indoor
	
	State req_move_indoor {
		printCurrentMessage
		onMsg(depositaction : depositaction(MATERIAL)){
			[# MATERIAL=ws.Material.valueOf(payloadArg(0)) #]
			request transporttrolley -m move : move(INDOOR)
		}
		updateResource [# "depositaction(req_move_indoor,$MATERIAL)" #] 
	}
	Transition t0 whenReply moveanswer -> chk_move_indoor
	State chk_move_indoor {
		updateResource [# "depositaction(chk_move_indoor,$MATERIAL)" #] 
		printCurrentMessage
		onMsg(moveanswer : moveanswer(RES)){
			[# RES = payloadArg(0); #]
		}
	}
	Goto req_pickup if [# RES=="OK" #] else error
	
	State req_pickup{
		printCurrentMessage
		updateResource [# "depositaction(req_pickup,$MATERIAL)" #] 
		request transporttrolley -m pickup : pickup(_)
	}
	Transition t0 whenReply pickupanswer -> chk_pickup
	State chk_pickup{
		printCurrentMessage
		updateResource [# "depositaction(chk_pickup,$MATERIAL)" #] 
		onMsg(pickupanswer : pickupanswer(RES)){
			[# RES = payloadArg(0); #]
		}
	}
	Goto reply if [# RES=="OK" #] else error
	
	State reply {
		printCurrentMessage
		updateResource [# "depositaction(reply,$MATERIAL)" #] 
		replyTo depositaction with pickupdone: pickupdone(_)
	}
	Goto req_move_container
	
	State req_move_container {
		[# 
			val Position = when(MATERIAL){
			    ws.Material.PLASTIC -> ws.Position.PLASTICBOX
			    ws.Material.GLASS -> ws.Position.GLASSBOX
			} #]
		printCurrentMessage
		updateResource [# "depositaction(req_move_container,$MATERIAL)" #] 
		request transporttrolley -m move : move($Position)
	}
	Transition t0 whenReply moveanswer -> chk_move_container
	State chk_move_container{
		printCurrentMessage
		updateResource [# "depositaction(chk_pickup,$MATERIAL)" #] 
		onMsg(moveanswer : moveanswer(RES)){
			[# RES = payloadArg(0); #]
		}
	}
	Goto req_dropout if [# RES=="OK" #] else error
	
	State req_dropout{
		updateResource [# "depositaction(req_dropout,$MATERIAL)" #] 
		request transporttrolley -m dropout : dropout(_)
	}
	Transition t0 whenReply dropoutanswer -> chk_dropout
	State chk_dropout{
		printCurrentMessage
		updateResource [# "depositaction(chk_dropout,$MATERIAL)" #] 
		onMsg(dropoutanswer : dropoutanswer(RES)){
			[# RES = payloadArg(0); #]
		}
	}
	Goto next_move if [# RES=="OK" #] else error

	State next_move{
		printCurrentMessage
		updateResource [# "depositaction(nextmove,$MATERIAL)" #] 
	}
	Transition t0 whenTime 10 -> move_home
				  whenRequest depositaction -> req_move_indoor
	
	State move_home{
		printCurrentMessage
		updateResource [# "depositaction(move_home,$MATERIAL)" #] 
		request transporttrolley -m move : move(HOME)
	}
	Transition t0 whenRequest depositaction -> req_move_indoor
				  whenReply   moveanswer -> wait
}



QActor transporttrolley context ctxrobot{
	[# val actor = this@Transporttrolley;
		suspend fun transitNow(stateName : String){
			var res = actor.handleCurrentMessage(NoMsg,actor.getStateByName(stateName));
			if(res) actor.elabMsgInState( );
			else println("ERROR: transition was not possible")
		}
		lateinit var RES : String
	#]
	
 	State wait initial {
 		printCurrentMessage
 		updateResource [# "transporttrolley(wait)" #]
 	}
 	Transition toNewState whenRequest pickup -> req_pickup
 						  whenRequest dropout -> req_dropout
 						  whenRequest move -> req_move
 						  
 	State req_pickup {
 		printCurrentMessage
 		updateResource [# "transporttrolley(req_pickup)" #]
 		request pickupdropouthandler -m pickup : pickup(_)
 	}
 	Transition toNewState whenReply pickupanswer -> chk_pickup
 	State chk_pickup {
 		printCurrentMessage
 		updateResource [# "transporttrolley(chk_pickup)" #]
 		onMsg( pickupanswer:pickupanswer(RES) ){
 			[# RES = payloadArg(0)#]
 			if[# RES=="OK" #]{
 				replyTo pickup with pickupanswer : pickupanswer(OK)
 			}else{
 				replyTo pickup with pickupanswer : pickupanswer(ERROR)
 			}
 		}
 	}
 	Goto wait
 	
 	State req_dropout {
 		printCurrentMessage
 		updateResource [# "transporttrolley(req_dropout)" #]
 		request pickupdropouthandler -m dropout : dropout(_)
 	}
 	Transition toNewState whenReply dropoutanswer -> chk_dropout
 	State chk_dropout {
 		printCurrentMessage
 		updateResource [# "transporttrolley(chk_dropout)" #] 
 		onMsg( dropoutanswer:dropoutanswer(RES) ){
 			[# RES = payloadArg(0)#]
 			if[# RES=="OK" #]{
 				replyTo dropout with dropoutanswer : dropoutanswer(OK)
 			}else{
 				replyTo dropout with dropoutanswer : dropoutanswer(ERROR)
 			}
 		}
 	}
 	Goto wait
 	
 	State req_move {
 		printCurrentMessage
 		[# var Pos : ws.Position? = null #]
 		onMsg( move:move(POS) ){
			[# Pos=ws.Position.valueOf(payloadArg(0)) #]
 			//println("transporttrolley | New robot destination: ${pos}")
 			request mover -m move : move($Pos)
 		}
 		updateResource [# "transporttrolley(req_move,$Pos)" #] 
 	}
 	Transition toNewState whenReply moveanswer -> chk_move
 	State chk_move {
 		printCurrentMessage
 		updateResource [# "transporttrolley(chk_move)" #] 
 		onMsg( moveanswer:moveanswer(RES) ){
 			[# RES = payloadArg(0)#]
 			if[# RES=="OK" #]{
 				replyTo move with moveanswer : moveanswer(OK)
 			}else{
 				replyTo move with moveanswer : moveanswer(ERROR)
 			}
 		}
 	}
 	Goto wait
}

QActor alarmreceiverpickupdropdown context ctxrobot{
	State wait initial {
		onMsg(disable : disable(BOOL)){
			if[# payloadArg(0).toBoolean() #]{
				forward pickupdropouthandler -m disable : disable(_)
			}else{
				forward pickupdropouthandler -m enable : enable(_)
			}
		}
	}
	Transition t0 whenEvent disable -> wait
}

QActor pickupdropouthandler context ctxrobot{
	
	State handle_prio {
		printCurrentMessage
		updateResource [# "pickupdropouthandler(handle_prio)" #] 
	}
	Transition t0 whenTime 10 -> wait
				whenMsg disable -> halt
	
	State halt {
		printCurrentMessage
		updateResource [# "pickupdropouthandler(halt)" #] 
	}
	Transition t0 whenMsg enable -> handle_prio
	 
	State wait initial {
		discardMsg Off
	 	printCurrentMessage
		updateResource [# "pickupdropouthandler(wait)" #] 
	}
	Transition t0 whenMsg disable -> halt
					whenRequest dropout -> do_dropout
					whenRequest pickup -> do_pickup
	
	State do_dropout {
	 	printCurrentMessage
		updateResource [# "pickupdropouthandler(do_dropout)" #]
		println("pickupdropouthandler | DROPOUT STARTING...")
		delay 1000 //simulate operation
		println("pickupdropouthandler | DROPOUT COMPLETE")
		replyTo dropout with dropoutanswer:dropoutanswer(OK)
	}
	Goto handle_prio
	
	State do_pickup {
		printCurrentMessage
		updateResource [# "pickupdropouthandler(do_pickup)" #]
		println("pickupdropouthandler | PICKUP STARTING...")
		delay 1000 //simulate operation
		println("pickupdropouthandler | PICKUP COMPLETE")
		replyTo pickup with pickupanswer:pickupanswer(OK)
	}
	Goto handle_prio
}

//RECEIVES move(POS) MESSAGES, MOVES THE ROBOT INTO POS, AND REPLY WITH moveanswer(RES)
//basically it translates high level move to the final position, into low level robot moves
QActor mover context ctxrobot{
	[# var DEST = ws.Position.HOME
	   var CURRPOS = ws.Position.HOME
	   lateinit var RES : String    #]
	  
	State wait initial {
		printCurrentMessage
		updateResource [# "mover(wait,$CURRPOS,$DEST)" #]
		emit moving : moving ($CURRPOS ,$DEST)
	}
	Transition t0 whenRequest move -> handle
	
	State handle {
		printCurrentMessage
		onMsg( move:move(POS) ){
			[# DEST = ws.Position.valueOf(payloadArg(0))#]
		}
		updateResource [# "mover(handle,$CURRPOS,$DEST)" #]
	}
	Goto req_forward if [# DEST!=CURRPOS #] else wait //if the destinatio is different form the current position, reach next corner
	
	//-------- ROBOT PROCEEDS ALONG THE WALL, THEN IT TURNS WHEN AN OBSTABLE IS FOUND -------
	State req_forward {
		printCurrentMessage
		updateResource [# "mover(req_forward,$CURRPOS,$DEST)" #]
		request basicrobotwrapper -m cmdsync : cmdsync(w)
	}
	Transition t0 whenReply cmdanswer -> chk_forward
	State chk_forward {
		printCurrentMessage
		updateResource [# "mover(chk_forward,$CURRPOS,$DEST)" #]
		onMsg( cmdanswer:cmdanswer(RES) ){
			[# RES = payloadArg(0)#]
		}
	}
	Goto req_turn if [# RES=="OK" #] else error
	
	State req_turn {
		printCurrentMessage
		updateResource [# "mover(req_turn,$CURRPOS,$DEST)" #]
		request basicrobotwrapper -m cmdsync : cmdsync(l)
	}
	Transition t0 whenReply cmdanswer -> chk_turn
	State chk_turn {
		printCurrentMessage
		updateResource [# "mover(chk_turn,$CURRPOS,$DEST)" #]
		onMsg( cmdanswer:cmdanswer(RES) ){
			[# RES = payloadArg(0)#]
		}
	}
	Goto reply if [# RES=="OK" #] else error
	
	State reply {
		printCurrentMessage
		[# CURRPOS=ws.func.nextPosition(CURRPOS) #]
		if[# CURRPOS==DEST #]{
			replyTo move with moveanswer : moveanswer(OK)
		}
		updateResource [# "mover(reply,$CURRPOS,$DEST)" #]
	}
	Goto handle
	//-----------------------------------------------------------------------------------------
	
	State error{
		printCurrentMessage
		updateResource [# "mover(error,$CURRPOS,$DEST)" #]
		println("mover | ERROR STATE")
	}
}

QActor alarmreceiverbasicrobot context ctxrobot{
	State wait initial {
		onMsg(disable : disable(BOOL)){
			if[# payloadArg(0).toBoolean() #]{
				forward basicrobotwrapper -m disable : disable(_)
			}else{
				forward basicrobotwrapper -m enable : enable(_)			}
		}
	}
	Transition t0 whenEvent disable -> wait
}

QActor basicrobotwrapper context ctxrobot{
	[# var MOVE : ws.Move? = null  #]
	
	State handle_prio {
		printCurrentMessage
		updateResource [# "basicrobotwrapper(handle_prio)" #] 
	}
	Transition t0 whenTime 10 -> wait
				whenMsg disable -> halt
	
	State halt {
		printCurrentMessage
		updateResource [# "basicrobotwrapper(halt)" #] 
	}
	Transition t0 whenMsg enable -> handle_prio
	 
	State wait initial {
		discardMsg Off
	 	printCurrentMessage
		updateResource [# "basicrobotwrapper(wait)" #] 
	}
	Transition t0 whenMsg disable -> halt
					whenRequest cmdsync -> handle
					
	State handle {
	 	printCurrentMessage
	 	onMsg( cmdsync:cmdsync(MOVE) ){
			[# MOVE = ws.Move.valueOf(payloadArg(0)) #]
		}
		updateResource [# "basicrobotwrapper(handle,$MOVE)" #]
	}
	Goto forward_cmd if [# MOVE==ws.Move.w #] else other_cmd
	
	State other_cmd {
		printCurrentMessage
		updateResource [# "basicrobotwrapper(other_cmd,$MOVE)" #]
		[# val MoveStr = MOVE.toString()#]
		forward basicrobot -m cmd : cmd($MoveStr)
		if[# MOVE==ws.Move.l || MOVE==ws.Move.r #]{
			delay 500 //wait for turn to complete
		}
		delay 100
		replyTo cmdsync with cmdanswer : cmdanswer(OK)
	}
	Goto handle_prio
	
	State forward_cmd {
		printCurrentMessage
		updateResource [# "basicrobotwrapper(forward_cmd)" #]
		forward basicrobot -m cmd : cmd(w)
	}
	Transition t0 whenMsg disable -> forward_halt
					whenEvent info -> collision
	
	State forward_halt {
		printCurrentMessage
		updateResource [# "basicrobotwrapper(forward_halt)" #]
		forward basicrobot -m cmd : cmd(h)
	}
	Transition t0 whenMsg enable -> forward_cmd
					whenEvent info -> collision
					
	State collision {
		printCurrentMessage
		updateResource [# "basicrobotwrapper(collision)" #]
		replyTo cmdsync with cmdanswer : cmdanswer(OK) 
	}
	Goto handle_prio
}


QActor basicrobot context ctxrobot{
[#
  var StepTime      = 0L
  var StartTime     = 0L     
  var Duration      = 0L
  var ExpectingCollision = false
  //var RobotType     = "" 
  var CurrentMove   = "unkknown"
#]  
 	State s0 initial { 	      
 		discardMsg Off  //WE want receive any msg
		println("basicrobot | START")	
 		qrun unibo.robot.robotSupport.create(myself,"basicrobotConfig.json")	
 		//[# RobotType = unibo.robot.robotSupport.robotKind #]
 		/*delay 1000  //give to the realsonar the time to start
        if[# RobotType != "virtual" #]{
        	[# var robotsonar = context!!.hasActor("realsonar")  
        	   if(robotsonar != null) unibo.robot.robotSupport.createSonarPipe(robotsonar) 
        	#] 
  		}//The Virtual robot sonar is created in virtualrobotSupport2021*/
 
  		//run unibo.robot.robotSupport.move( "l" )    //synch
 		//run unibo.robot.robotSupport.move( "r" )	//synch
    		//run unibo.robot.robotSupport.move( "w" )    //asynch 
 		updateResource [# "basicrobot(start)" #]
 	} 
	Goto work
	
	State work{ 
		println("basicrobot | waiting .............. ")  
	} 
	Transition t1   whenMsg     cmd       -> execcmd
					whenRequest step      -> doStep			
					whenMsg    obstacle   -> handleObstacle  //in virtualrobot caused by the move w/s
					//whenEvent sonar       -> handleSonar
				  	whenMsg     end       -> endwork			  
	
	State execcmd{
		printCurrentMessage
		onMsg( cmd : cmd(MOVE) ){
  			//activate the motors
  			[# val Move = payloadArg(0) #]
  			[# if(Move=="w") ExpectingCollision=true #]
  			println("basicrobot | executing '${Move}'")
			run unibo.robot.robotSupport.move( Move )
			updateResource [# "moveactivated(Move)" #]
		}
	 }
	 Goto work  
	 
	State handleObstacle{
		printCurrentMessage
		//println("basicrobot | handleObstacle")
		if[# ExpectingCollision #]{
			[# ExpectingCollision=false #]
			run unibo.robot.robotSupport.move( "h" )
			delay 600
			updateResource [# "obstacle(${CurrentMove})" #]
			/*if[# CurrentMove == "w"#]{
			//back to avoid emission of obstacle again if real robot moving forward !!!
			//if[# RobotType != "virtual" #]{	//is it better to embed this behavior in the support?
				run unibo.robot.robotSupport.move( "s" )
				delay 100 
				run unibo.robot.robotSupport.move( "h" ) 
	 		}*/
	 		emit info : info( obstacledoing(w) )
	 		//forward transporttrolley -m wall : wall( obstacledoing(w) )
		}
	}
	Goto work 
 
	/*State handleSonar{
		printCurrentMessage
	}
	Goto work*/
		
   	State doStep{ 
 		printCurrentMessage  
		onMsg( step : step( T ) ){  
			[#	StepTime = payloadArg(0).toLong() 	#]  
			updateResource [# "step(${StepTime})" #]
  		}  
        memoCurrentTime StartTime  
        println("basicrobot | doStep StepTime =$StepTime  ")        
        run unibo.robot.robotSupport.move( "w" )  //moves a real robot forever !!!
	}  
	Transition t0 
		whenTimeVar StepTime  -> stepDone  	 
 		whenMsg  obstacle     -> stepFail		
    	 
	
	State stepDone{   
 		run unibo.robot.robotSupport.move( "h" )  //stop the real robot already done ???
		updateResource [# "stepDone($StepTime)" #]
   		//emit info : info( stepdone($StepTime) )
   		replyTo step with stepdone : stepdone(ok)
		println("basicrobot | stepDone reply done")
  	}
	Goto work  
 
	State stepFail{  		
		setDuration Duration from StartTime
		run unibo.robot.robotSupport.move( "h" )  //stop the (real) robot
		[# var TunedDuration = Duration;  
			TunedDuration = Duration * 5 / 6
		#]
		println("basicrobot | stepFail duration=$Duration TunedDuration=$TunedDuration")
			run unibo.robot.robotSupport.move( "s" )
			delayVar TunedDuration 
			run unibo.robot.robotSupport.move( "h" ) 
 		updateResource [# "stepFail($Duration)" #] 
 		//emit info : info( stepFail($Duration) )
 		replyTo step with stepfail : stepfail($Duration, obst)
    }
	Goto work
	
	State endwork{ 
		updateResource [# "basicrobot(end)" #]	 		
 		terminate 1
	}
}

QActor sonar context ctxalarm {
	[# val simulate       = true
	   val sonarActorName = "sonar"
	   val usingDomain    = false
	#]
	State s0 initial {
		printCurrentMessage
		run alarmSonar.configureSonarSubsystem.configureTheSonar(simulate, sonarActorName, usingDomain)
		//ASSUMPTION: the sonar subsystem emits the event sonar:distance(V)
	}
	Transition t0 whenMsg sonaractivate   -> activateTheSonar
			      whenMsg sonardeactivate -> deactivateTheSonar
	
	State activateTheSonar{
		printCurrentMessage
		updateResource [# "sonar(activateTheSonar,${`it.unibo`.radarSystem22.domain.utils.DomainSystemConfig.simulation})" #]
		if[#  `it.unibo`.radarSystem22.domain.utils.DomainSystemConfig.simulation #]{
			//println("sonar simulator")
			forward sonarsimulator -m sonaractivate : info(ok) 
			//run sonarConfig.activateSonarSimulated() //usingDomain
		}else {
			//println("sonar real")
			forward sonardatasource -m sonaractivate : info(ok)  
		}
	}
	Transition t0  whenEvent sonar                -> handleSonarData  
	               whenMsg   sonardeactivate       -> deactivateTheSonar
	
	State deactivateTheSonar{
		printCurrentMessage
		updateResource [# "sonar(deactivateTheSonar,${`it.unibo`.radarSystem22.domain.utils.DomainSystemConfig.simulation}" #]
		if[#  `it.unibo`.radarSystem22.domain.utils.DomainSystemConfig.simulation #]{
			//println("sonar simulator")
			forward sonarsimulator -m sonardeactivate : info(ok) 
			//run sonarConfig.activateSonarSimulated() //usingDomain
		}else {
			//println("sonar real")
			forward sonardatasource -m sonardeactivate : info(ok)  
		}
	}
	Goto end
  
  	State handleSonarData{
  		printCurrentMessage
  		 onMsg( sonardistance : distance(D) ){
   		 	[# val D = payloadArg(0) #]   
   		 	updateResource [# "sonar(handleSonarData,${`it.unibo`.radarSystem22.domain.utils.DomainSystemConfig.simulation},${D})" #]
  		    //println("Distance ${D}")
  		 	emit sonardata : distance($D) //for the application
  		 }
  	}
   	Transition t0 whenEvent sonar           -> handleSonarData
   				  whenMsg   sonardeactivate -> deactivateTheSonar
   		
	State end{
		printCurrentMessage
		updateResource [# "sonar(end,${`it.unibo`.radarSystem22.domain.utils.DomainSystemConfig.simulation})" #]
		//println("sonar BYE")
		//[# System.exit(0) #]
	}
}

