//https://dl.bintray.com/jetbrains/kotlin/eclipse-plugin/0.8.19/ 

System demotransporttrolley    
//mqttBroker "localhost" : 1883 eventTopic "demo0/events"
//mqttBroker "broker.hivemq.com" : 1883 eventTopic "demo0/events"


//richiesta al wasteservice 
//MATERIAL = PLASTIC | GLASS
//TRUCKLOAD =  integer number
//richiesta al trolley
//RESULT =  OK | ERROR 
Request pickup         : pickup(_)
Reply   pickupanswer   : pickupanswer(RESULT)
Request dropout        : dropout(_)
Reply   dropoutanswer  : dropoutanswer(RESULT)
Request move           : move(POSITION)    //INDOOR | PLASTICBOX | GLASSBOX | HOME
Reply   moveanswer     : moveanswer(RESULT)

//method to trigger the next transition within the state: send this message to the actor itself (cumbersome but works great)
Dispatch noMsg : noMsg(_)

 
Context ctxtransporttrolley ip [host="localhost" port=8095]
 

QActor transporttrolley context ctxtransporttrolley{
	[# lateinit var tmp : String 
		
	val actor = this@Transporttrolley;
		suspend fun transitNow(stateName : String){
			var res = actor.handleCurrentMessage(NoMsg,actor.getStateByName(stateName));
			if(res) actor.elabMsgInState( );
			else println("ERROR: transition was not possible")
		}
	#]
	
	State s0 initial { 	    
		discardMsg On
		printCurrentMessage
		[# sysUtil.logMsgs=true #]
	}
	Goto handle_cmd
	 
	State handle_cmd {
		onMsg( move:move(ARG) ){
			[# tmp = payloadArg(0) #]
			println("move(${tmp})")
			[# val stateName = when(ws.Position.valueOf(tmp)) {
					ws.Position.HOME -> "moving_home"
					ws.Position.INDOOR -> "moving_indoor"
					ws.Position.PLASTICBOX -> "moving_plasticbox"
					ws.Position.GLASSBOX -> "moving_glassbox"
				}
				transitNow(stateName)
			#]
 		}
 		onMsg( pickup:pickup(_) ){
 			println("PICKUP")
 			[# transitNow("pickUp") #]
 		}
 		onMsg( dropout:dropout(_) ){
 			println("DROPOUT")
 			[# transitNow("dropOut") #]
 		}
 	}
 	Transition t0 whenRequest move -> handle_cmd
 					whenRequest pickup -> handle_cmd
 					whenRequest dropout -> handle_cmd
 	
 	State moving_home {
 	}
 	Transition t0 whenTime 1000 -> moved_home    //per il momento simulo lo spostamento con un delay
 					whenRequest move -> handle_cmd
 					
 	State moved_home {
 		replyTo move with moveanswer : moveanswer(OK)
 		println("robot reached HOME")
 	}
 	Transition t0 whenRequest move -> handle_cmd
 					whenRequest pickup -> handle_cmd
 					whenRequest dropout -> handle_cmd
 	
 	State moving_indoor {
 	}
 	Transition t0 whenTime 1000 -> moved_indoor    //per il momento simulo lo spostamento con un delay
 					whenRequest move -> handle_cmd
 	
 	State moved_indoor {
 		replyTo move with moveanswer : moveanswer(OK)
 		println("robot reached INDOOR")
 	}
 	Transition t0 whenRequest move -> handle_cmd
 					whenRequest pickup -> handle_cmd
 					whenRequest dropout -> handle_cmd
 					
 	State moving_plasticbox {
 	}
 	Transition t0 whenTime 1000 -> moved_plasticbox    //per il momento simulo lo spostamento con un delay
 					whenRequest move -> handle_cmd
 					
 	State moved_plasticbox {
 		replyTo move with moveanswer : moveanswer(OK)
 		println("robot reached PLASTICBOX")
 	}
 	Transition t0 whenRequest move -> handle_cmd
 					whenRequest pickup -> handle_cmd
 					whenRequest dropout -> handle_cmd
 	
 	State moving_glassbox {
 	}
 	Transition t0 whenTime 1000 -> moved_glassbox    //per il momento simulo lo spostamento con un delay
 					whenRequest move -> handle_cmd
 					
 	State moved_glassbox {
 		replyTo move with moveanswer : moveanswer(OK)
 		println("robot reached GLASSBOX")
 	}
 	Transition t0 whenRequest move -> handle_cmd
 					whenRequest pickup -> handle_cmd
 					whenRequest dropout -> handle_cmd
 					
 	State pickUp {
 		delay 1000
 		replyTo pickup with pickupanswer : pickupanswer(OK)
 		println("robot pickedUp")
 	}
 	Transition t0 whenRequest move -> handle_cmd
 					whenRequest pickup -> handle_cmd
 					whenRequest dropout -> handle_cmd
 	
 	State dropOut {
 		delay 1000
 		replyTo dropout with dropoutanswer : dropoutanswer(OK)
 		println("robot droppedOut")
 	}
 	Transition t0 whenRequest move -> handle_cmd
 					whenRequest pickup -> handle_cmd
 					whenRequest dropout -> handle_cmd
}
