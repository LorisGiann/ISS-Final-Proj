//https://dl.bintray.com/jetbrains/kotlin/eclipse-plugin/0.8.19/

System demo0    
//mqttBroker "localhost" : 1883 eventTopic "demo0/events"
//mqttBroker "broker.hivemq.com" : 1883 eventTopic "demo0/events"
   

//richiesta al wasteservice
//MATERIAL = PLASTIC | GLASS
//TRUCKLOAD =  integer number
//richiesta al trolley
//RESULT =  OK | ERROR 
Request pickup         : pickup(_)
Reply   pickupanswer   : pickupanswer(RESULT)
Request dropout        : dropout(_)
Reply   dropoutanswer  : dropoutanswer(RESULT)
Request move           : move(POSITION)    //INDOOR | PLASTICBOX | GLASSBOX | HOME
Reply   moveanswer     : moveanswer(RESULT)

Dispatch endMoveKo     : endMoveKo( V )
Request  cmd 		   : cmd(MOVE)
Reply    cmdanswer     : cmdanswer(RESULT)

//method to trigger the next transition within the state: send this message to the actor itself (cumbersome but works great)
Dispatch noMsg : noMsg(_)

 
Context ctxTransportTrolley ip [host="localhost" port=8095]
  

QActor transporttrolley context ctxTransportTrolley{
	[# lateinit var tmp : String #]
	
	State s0 initial { 	    
		discardMsg On
		[# sysUtil.logMsgs=true #]
 	}
 	Transition t0 whenRequest move -> handle_cmd
 	 
 	State handle_cmd {
		onMsg( move:move(ARG) ){
			[# tmp = payloadArg(0) #]
 			println("move(${tmp})")
 			forward transporttrolley -m noMsg : noMsg(_)
 		}
 	}
 	Transition toNewState whenMsg noMsg and [# tmp=="HOME" #] -> moving_home
 						whenMsg noMsg and [# tmp=="INDOOR" #] -> moving_indoor
 						whenMsg noMsg and [# tmp=="PLASTICBOX" #] -> moving_plasticbox
 						whenMsg noMsg and [# tmp=="GLASSBOX" #] -> moving_glassbox
 	
 	State moving_home {
 		
 	}
 	Transition t0 whenTime 1000 -> moved_home    //per il momento simulo lo spostamento con un delay
 					whenRequest move -> handle_cmd
 					
 	State moved_home {
 		replyTo move with moveanswer : moveanswer(OK)
 		println("robot reached HOME")
 	}
 	Transition t0 whenRequest move -> handle_cmd
 	
 	
 	State moving_indoor {
 	}
 	Transition t0 whenTime 1000 -> moved_indoor    //per il momento simulo lo spostamento con un delay
 					whenRequest move -> handle_cmd
 	
 	State moved_indoor {
 		replyTo move with moveanswer : moveanswer(OK)
 		println("robot reached INDOOR")
 	}
 	Transition t0 whenRequest move -> handle_cmd
					whenRequest pickup -> pickUp
 					
 	State moving_plasticbox {
 	}
 	Transition t0 whenTime 1000 -> moved_plasticbox    //per il momento simulo lo spostamento con un delay
 					whenRequest move -> handle_cmd
 					
 	State moved_plasticbox {
 		replyTo move with moveanswer : moveanswer(OK)
 		println("robot reached PLASTICBOX")
 	}
 	Transition t0 whenRequest move -> handle_cmd
 					whenRequest dropout -> dropOut 	
 	
 	State moving_glassbox {
 	}
 	Transition t0 whenTime 1000 -> moved_glassbox    //per il momento simulo lo spostamento con un delay
 					whenRequest move -> handle_cmd
 					
 	State moved_glassbox {
 		replyTo move with moveanswer : moveanswer(OK)
 		println("robot reached GLASSBOX")
 	}
 	Transition t0 whenRequest move -> handle_cmd
 					whenRequest dropout -> dropOut
 					
 	State pickUp {
 		delay 1000
 		replyTo pickup with pickupanswer : pickupanswer(OK)
 		println("robot pickedUp")
 	}
 	Transition t0 whenRequest move -> handle_cmd
 	
 	State dropOut {
 		delay 1000
 		replyTo dropout with dropoutanswer : dropoutanswer(OK)
 		println("robot droppedOut")
 	}
 	Transition t0 whenRequest move -> handle_cmd
}

 
//transportTrolley TEST
QActor test_trasporttrolley context ctxTransportTrolley{
	[# lateinit var RES : String #]
	
	State s0 initial { 	    
		discardMsg On
		//[# sysUtil.logMsgs=true #]
		request transporttrolley -m move : move(INDOOR)
 	}
 	Transition t0 whenReply moveanswer -> s1
 	
 	State s1 {
 		onMsg(moveanswer : moveanswer(RESULT)) {
			[# RES = payloadArg(0); #]
			if[# RES == "OK" #]{
				println("move indoor")
				request transporttrolley -m pickup : pickup(_)
			}else{
				println("error")
			}
		
		}	
 	}
 	Transition t0 whenReply  pickupanswer -> s2
 	
 	State s2 {
 		onMsg(pickupanswer : pickupanswer(RESULT)) {
			request transporttrolley -m move : move(PLASTICBOX)
		}	
 	}
 	Transition t0 whenReply  moveanswer -> s3
 	
 	State s3 {
 		onMsg(moveanswer : moveanswer(RESULT)) {
			[# RES = payloadArg(0); #]
			if[# RES == "OK" #]{
				println("move plastic box")
				request transporttrolley -m dropout : dropout(_)
			}else{
				println("error")
			}
		
		}	
 	}
 	Transition t0 whenReply  dropoutanswer -> s4
 	
 	State s4 {
 		println("dropout")
 		println("finish")
 	}
 	

}
