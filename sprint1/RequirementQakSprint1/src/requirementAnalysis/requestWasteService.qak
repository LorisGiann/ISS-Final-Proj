//https://dl.bintray.com/jetbrains/kotlin/eclipse-plugin/0.8.19/
  
System demo0    
// ------------ wasteservice msgs --------------------
//MATERIAL = PLASTIC | GLASS
//TRUCKLOAD =  integer number
Request depositrequest : depositrequest(MATERIAL, TRUCKLOAD)
Reply loadaccepted     : loadaccepted(MATERIAL, TRUCKLOAD)
Reply loadrejected     : loadrejected(MATERIAL, TRUCKLOAD)
// ------------------------------------------------------ 
    
// ------------------ CONTEXTS -------------------
//REMEMBER TO PUT datacleaner AND distancefilter IN THE SAME CONTEXT OF basicrobot
Context ctxRequestWasteService ip [host="localhost" port=8095]

QActor wasteservice context ctxRequestWasteService{  
	[# 
		val MAXPB = 10
		val MAXGB = 10
		var contPB = 0
		var contGB = 0
		lateinit var Material  : String
		lateinit var TruckLoad : String
		
		fun checkdepositpossible(MATERIAL:String,LOAD:String) : Boolean {
 				return (MATERIAL=="PLASTIC" && LOAD.toInt()+contPB<=MAXPB) 
 				 || (MATERIAL=="GLASS" && LOAD.toInt()+contGB<=MAXGB);
 		}
 				 
 		fun updateDeposit(MATERIAL:String,LOAD:String) : Unit {
 				when(MATERIAL){
				    "PLASTIC" -> contPB+=LOAD.toInt()
				    "GLASS" -> contGB+=LOAD.toInt()
				    else -> {
				        print("ERRORE MATERIALE")
					} 
 				}
 		}
	#]
	
	State wait initial {
		printCurrentMessage
		discardMsg Off
		println("Waiting for requests")
		//[# sysUtil.logMsgs=true #]
 	}
 	Transition t0 whenRequest depositrequest -> handle_req
 	
 	State handle_req {
		printCurrentMessage
		onMsg(depositrequest : depositrequest(MATERIAL, TRUCKLOAD)) {
			[#
				 Material 	= payloadArg(0) ;
				 TruckLoad 	= payloadArg(1) ;
			#]
			println("arrived $TruckLoad Kg of $Material")
			if[# checkdepositpossible( Material, TruckLoad ) #]{
				[# updateDeposit( Material, TruckLoad ) 
					#]
				println("PB capacity: ${contPB}, GB capacity: ${contGB}")	
				replyTo depositrequest with loadaccepted : loadaccepted($Material,$TruckLoad)
			} else{  
				replyTo depositrequest with loadrejected : loadrejected($Material,$TruckLoad)
			}		
		} 
 	}
 	Goto wait
 	
}


//TEST PLASTICA ACCETTATA, PLASTICA RIGETTATA, SEQUENZIALI
QActor testwasteservice context ctxRequestWasteService{
	State s0 initial { 	    
		discardMsg On
		//[# sysUtil.logMsgs=true #]
		request wasteservice -m depositrequest : depositrequest(PLASTIC,9)
 	}
 	Transition t0 whenReply loadaccepted -> s1
 					whenReply loadrejected -> error
 	
 	State s1 {
 		println("load accepted successfully")
 		request wasteservice -m depositrequest : depositrequest(PLASTIC,2)
 	}
 	Transition t0 whenReply loadaccepted -> error
 					whenReply loadrejected -> s2
 	
 	State s2 {
 		println("load rejected successfully")
 	}
 	
 	State error {
 		println("errore")
 	}
}

