/* Generated by AN DISI Unibo */ 
package it.unibo.wasteservice

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Wasteservice ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "wait"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		val interruptedStateTransitions = mutableListOf<Transition>()
		 var Material  : ws.Material
			   var TruckLoad : Float        
		return { //this:ActionBasciFsm
				state("wait") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						updateResourceRep( "wasteservice(wait,${ws.func.contPB},${ws.func.contGB})"  
						)
						discardMessages = false
					}
					 transition(edgeName="t00",targetState="handle_req",cond=whenRequest("depositrequest"))
				}	 
				state("handle_req") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						updateResourceRep( "wasteservice(handle_req,${ws.func.contPB},${ws.func.contGB})"  
						)
						if( checkMsgContent( Term.createTerm("depositrequest(MATERIAL,TRUCKLOAD)"), Term.createTerm("depositrequest(MATERIAL,TRUCKLOAD)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								   Material 	= ws.Material.valueOf(payloadArg(0))
												 TruckLoad 	= payloadArg(1).toFloat()    
								if(  ws.func.checkdepositpossible( Material, TruckLoad )  
								 ){ ws.func.updateDeposit( Material, TruckLoad )  
								answer("depositrequest", "loadaccept", "loadaccept($Material,$TruckLoad)"   )  
								}
								else
								 {answer("depositrequest", "loadrejected", "loadrejected($Material,$TruckLoad)"   )  
								 }
						}
					}
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
			}
		}
}
