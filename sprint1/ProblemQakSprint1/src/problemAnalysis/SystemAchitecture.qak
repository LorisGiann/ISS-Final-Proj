//https://dl.bintray.com/jetbrains/kotlin/eclipse-plugin/0.8.19/

System demosystemarchitecture
// --------------- wasteservice msgs --------------------
//MATERIAL = PLASTIC | GLASS
//TRUCKLOAD =  float number
Request depositrequest : depositrequest(MATERIAL, TRUCKLOAD)
Reply loadaccept     : loadaccept(MATERIAL, TRUCKLOAD)
Reply loadrejected     : loadrejected(MATERIAL, TRUCKLOAD)
// ------------------------------------------------------ 

// ------------------ basicrobot msgs -------------------
//MOVE =  w | a | s | d | h    | l | r   //w and s: the robot continues to go until an obstacle is found
Dispatch cmd       	: cmd(MOVE)
Dispatch end       	: end(ARG)
 
Request step       : step( TIME )	
Reply   stepdone   : stepdone(V)  
Reply   stepfail   : stepfail(DURATION, CAUSE)

Event    info          : info( ARG ) 	    //for external components, not coap-observed
Event    sonar         : sonar(DISTANCE,NAME)	//emitted by distancefilter
Dispatch obstacle      : obstacle( ARG ) 	//generated by distancefilter
// ------------------------------------------------------

// ----------------------------------------------- transporttrolley commands ---------------------------------------------
//RESULT =  OK | ERROR 
Request pickup         : pickup(_)
Reply   pickupanswer   : pickupanswer(RESULT)
Request dropout        : dropout(_)
Reply   dropoutanswer  : dropoutanswer(RESULT)
//Request move           : moveTo(POSITION)    //INDOOR | PLASTICBOX | GLASSBOX | HOME
Request movetoHOME     : moveToHOME(_)
Request movetoINDOOR : moveToINDOOR(_)
Request movetoPLASTICBOX : moveToPLASTICBOX(_)
Request movetoGLASSBOX : moveToGLASSBOX(_)
Reply   movetoanswer     : movetoanswer(RESULT)
// ------------------------------------------------------------------------------------------------------------------------
    
// ---------------------- CONTEXTS -----------------------
Context ctxdriver ip [host="localhost" port=8094]
Context ctxserver ip [host="localhost" port=8095]
Context ctxrobot ip [host="localhost" port=8096]
Context ctxalarm ip [host="localhost" port=8097]
// ------------------------------------------------------

QActor smartdevice context ctxdriver{
	
	State s0 initial {
		request wasteservice -m depositrequest:depositrequest(_)
	}
}


QActor wasteservice context ctxserver{  
	[# var Material  : ws.Material
	   var TruckLoad : Float       #]
	
	State wait initial {
		printCurrentMessage
		discardMsg Off
	}
	Transition t0 whenRequest depositrequest -> handle_req
	
	State handle_req {
		printCurrentMessage
		onMsg(depositrequest : depositrequest(MATERIAL, TRUCKLOAD)) {
			[#   Material 	= ws.Material.valueOf(payloadArg(0))
				 TruckLoad 	= payloadArg(1).toFloat()   #]
			if[# ws.func.checkdepositpossible( Material, TruckLoad ) #]{
				[# ws.func.updateDeposit( Material, TruckLoad ) #]
				replyTo depositrequest with loadaccept : loadaccept($Material,$TruckLoad)
				
				//send commands towards transporttrolley
				request transporttrolley -m pickup : pickup(_)
				request transporttrolley -m dropout : move(_)
				request transporttrolley -m movetoHOME : moveToHOME(_)
				request transporttrolley -m movetoINDOOR : moveToINDOOR(_)
				request transporttrolley -m movetoPLASTICBOX : moveToPLASTICBOX(_)
				request transporttrolley -m movetoGLASSBOX : moveToGLASSBOX(_)
				//update containers
				[# val Plastic = ws.func.contPB
					val Glass = ws.func.contGB #]
				
			}else{
				replyTo depositrequest with loadrejected : loadrejected($Material,$TruckLoad)
			}
		}
	}
	Goto wait
}

QActor transporttrolley context ctxrobot{
	
	State wait initial {
		printCurrentMessage
		discardMsg Off
 	}
 	Transition t0 whenRequest pickup -> handle_req
 					whenRequest pickup -> handle_req
 	
 	State handle_req {
		printCurrentMessage
		
		//send commands towards transporttrolley
		forward basicrobot -m cmd : cmd(_)
 	}
 	Goto handling_req
 	
 	State handling_req {
		
 	}
 	Transition t0 whenEvent info -> wait
}









QActor basicrobot context ctxrobot{
[#
  var StepTime      = 0L
  var StartTime     = 0L     
  var Duration      = 0L
  var ExpectingCollision = false
  //var RobotType     = "" 
  var CurrentMove   = "unkknown"
#]  
 	State s0 initial { 	      
 		discardMsg Off  //WE want receive any msg
		println("basicrobot | START")	
 		qrun unibo.robot.robotSupport.create(myself,"basicrobotConfig.json")	
 		//[# RobotType = unibo.robot.robotSupport.robotKind #]
 		/*delay 1000  //give to the realsonar the time to start
        if[# RobotType != "virtual" #]{
        	[# var robotsonar = context!!.hasActor("realsonar")  
        	   if(robotsonar != null) unibo.robot.robotSupport.createSonarPipe(robotsonar) 
        	#] 
  		}//The Virtual robot sonar is created in virtualrobotSupport2021*/
 
  		//run unibo.robot.robotSupport.move( "l" )    //synch
 		//run unibo.robot.robotSupport.move( "r" )	//synch
    		//run unibo.robot.robotSupport.move( "w" )    //asynch 
 		updateResource [# "basicrobot(s0)" #]
 	}
	Goto work

	State work{
		println("basicrobot | waiting .............. ")
	}
	Transition t1   whenMsg     cmd       -> execcmd
					whenRequest step      -> doStep
					whenMsg    obstacle   -> handleObstacle  //in virtualrobot caused by the move w/s
					//whenEvent sonar       -> handleSonar
				  	whenMsg     end       -> endwork

	State execcmd{
		printCurrentMessage
		onMsg( cmd : cmd(MOVE) ){
  			//activate the motors
  			[# val Move = payloadArg(0) #]
  			[# if(Move=="w") ExpectingCollision=true #]
  			println("basicrobot | executing '${Move}'")
			run unibo.robot.robotSupport.move( Move )
			updateResource [# "basicrobot(execcmd,$Move)" #]
		}
	 }
	 Goto work

	State handleObstacle{
		printCurrentMessage
		//println("basicrobot | handleObstacle")
		if[# ExpectingCollision #]{
			[# ExpectingCollision=false #]
			run unibo.robot.robotSupport.move( "h" )
			delay 600
			updateResource [# "basicrobot(handleObstacle,${CurrentMove})" #]
			/*if[# CurrentMove == "w"#]{
			//back to avoid emission of obstacle again if real robot moving forward !!!
			//if[# RobotType != "virtual" #]{	//is it better to embed this behavior in the support?
				run unibo.robot.robotSupport.move( "s" )
				delay 100
				run unibo.robot.robotSupport.move( "h" )
	 		}*/
	 		emit info : info( obstacledoing(w) )
	 		//forward transporttrolley -m wall : wall( obstacledoing(w) )
		}
	}
	Goto work

	/*State handleSonar{
		printCurrentMessage
	}
	Goto work*/

   	State doStep{
 		printCurrentMessage
		onMsg( step : step( T ) ){
			[#	StepTime = payloadArg(0).toLong() 	#]
			updateResource [# "basicrobot(doStep,${StepTime})" #]
  		}
        memoCurrentTime StartTime
        println("basicrobot | doStep StepTime =$StepTime  ")
        run unibo.robot.robotSupport.move( "w" )  //moves a real robot forever !!!
	}
	Transition t0
		whenTimeVar StepTime  -> stepDone
 		whenMsg  obstacle     -> stepFail


	State stepDone{
 		run unibo.robot.robotSupport.move( "h" )  //stop the real robot already done ???
		updateResource [# "basicrobot(stepDone,$StepTime)" #]
   		//emit info : info( stepdone($StepTime) )
   		replyTo step with stepdone : stepdone(ok)
		println("basicrobot | stepDone reply done")
  	}
	Goto work

	State stepFail{
		setDuration Duration from StartTime
		run unibo.robot.robotSupport.move( "h" )  //stop the (real) robot
		[# var TunedDuration = Duration;
			TunedDuration = Duration * 5 / 6
		#]
		println("basicrobot | stepFail duration=$Duration TunedDuration=$TunedDuration")
			run unibo.robot.robotSupport.move( "s" )
			delayVar TunedDuration
			run unibo.robot.robotSupport.move( "h" )
 		updateResource [# "basicrobot(stepFail,$Duration)" #]
 		//emit info : info( stepFail($Duration) )
 		replyTo step with stepfail : stepfail($Duration, obst)
    }
	Goto work

	State endwork{
		updateResource [# "basicrobot(endwork)" #]
 		terminate 1
	}
}
