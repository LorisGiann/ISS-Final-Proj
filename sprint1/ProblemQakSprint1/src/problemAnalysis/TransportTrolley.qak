//https://dl.bintray.com/jetbrains/kotlin/eclipse-plugin/0.8.19/

System demotransporttrolley
//mqttBroker "localhost" : 1883 eventTopic "demo0/events"
//mqttBroker "broker.hivemq.com" : 1883 eventTopic "demo0/events"


//richiesta al trolley
//RESULT =  OK | ERROR 
Request pickup         : pickup(_)
Reply   pickupanswer   : pickupanswer(RESULT)
Request dropout        : dropout(_)
Reply   dropoutanswer  : dropoutanswer(RESULT)
Request moveto         : moveto(POSITION)    //INDOOR | PLASTICBOX | GLASSBOX | HOME
Reply   movetoanswer     : movetoanswer(RESULT)

//method to trigger the next transition within the state: send this message to the actor itself (cumbersome but works great)
Dispatch noMsg : noMsg(_)


Context ctxrobottest ip [host="localhost" port=8095]
 

QActor transporttrolley context ctxrobottest{
	[#  lateinit var tmp : String 
		var newState : String? = null #]
	
	State s0 initial {
		discardMsg On
		updateResource [# "transporttrolley(s0)" #]
		printCurrentMessage
		[# sysUtil.logMsgs=true #]
	}
	Transition t0 whenRequest moveto -> handle_cmd
 					whenRequest pickup -> handle_cmd
 					whenRequest dropout -> handle_cmd
	 
	State handle_cmd {
		updateResource [# "transporttrolley(handle_cmd)" #]
		printCurrentMessage
		onMsg( moveto:moveto(ARG) ){
			[# tmp = payloadArg(0) #]
			println("move(${tmp})")
			[# newState = when(ws.Position.valueOf(tmp)) {
					ws.Position.HOME -> "moving_home"
					ws.Position.INDOOR -> "moving_indoor"
					ws.Position.PLASTICBOX -> "moving_plasticbox"
					ws.Position.GLASSBOX -> "moving_glassbox"
				}
			#]
 		}
 		onMsg( pickup:pickup(_) ){
 			println("PICKUP")
 			[# newState = "pickUp" #]
 		}
 		onMsg( dropout:dropout(_) ){
 			println("DROPOUT")
 			[# newState = "dropOut" #]
 		}
 	}
 	Goto handle_update_switch_1
	State handle_update_switch_1{} Goto moving_home if [# newState=="moving_home" #] else handle_update_switch_2
	State handle_update_switch_2{} Goto moving_indoor if [# newState=="moving_indoor" #] else handle_update_switch_3
	State handle_update_switch_3{} Goto moving_plasticbox if [# newState=="moving_plasticbox" #] else handle_update_switch_4
	State handle_update_switch_4{} Goto moving_glassbox if [# newState=="moving_glassbox" #] else handle_update_switch_5
	State handle_update_switch_5{} Goto pickUp if [# newState=="pickUp" #] else handle_update_switch_6
	State handle_update_switch_6{} Goto dropOut if [# newState=="dropOut" #] else s0
 	
 	State moving_home {
 		updateResource [# "transporttrolley(moving_home)" #]
 		printCurrentMessage
 	}
 	Transition t0 whenTime 1000 -> moved_home    //per il momento simulo lo spostamento con un delay
 					whenRequest moveto -> handle_cmd
 	State moved_home {
 		updateResource [# "transporttrolley(moved_home)" #]
 		printCurrentMessage
 		replyTo moveto with movetoanswer : movetoanswer(OK)
 		println("robot reached HOME")
 	}
 	Transition t0 whenRequest moveto -> handle_cmd
 					whenRequest pickup -> handle_cmd
 					whenRequest dropout -> handle_cmd
 	
 	State moving_indoor {
 		updateResource [# "transporttrolley(moving_indoor)" #]
 		printCurrentMessage
 	}
 	Transition t0 whenTime 1000 -> moved_indoor    //per il momento simulo lo spostamento con un delay
 					whenRequest moveto -> handle_cmd
 	State moved_indoor {
 		updateResource [# "transporttrolley(moved_indoor)" #]
 		printCurrentMessage
 		replyTo moveto with movetoanswer : movetoanswer(OK)
 		println("robot reached INDOOR")
 	}
 	Transition t0 whenRequest moveto -> handle_cmd
 					whenRequest pickup -> handle_cmd
 					whenRequest dropout -> handle_cmd
 					
 	State moving_plasticbox {
 		updateResource [# "transporttrolley(moving_plasticbox)" #]
 		printCurrentMessage
 	}
 	Transition t0 whenTime 1000 -> moved_plasticbox    //per il momento simulo lo spostamento con un delay
 					whenRequest moveto -> handle_cmd
 	State moved_plasticbox {
 		updateResource [# "transporttrolley(moved_plasticbox)" #]
 		printCurrentMessage
 		replyTo moveto with movetoanswer : movetoanswer(OK)
 		println("robot reached PLASTICBOX")
 	}
 	Transition t0 whenRequest moveto -> handle_cmd
 					whenRequest pickup -> handle_cmd
 					whenRequest dropout -> handle_cmd
 	
 	State moving_glassbox {
 		updateResource [# "transporttrolley(moving_glassbox)" #]
 		printCurrentMessage
 	}
 	Transition t0 whenTime 1000 -> moved_glassbox    //per il momento simulo lo spostamento con un delay
 					whenRequest moveto -> handle_cmd
 	State moved_glassbox {
 		updateResource [# "transporttrolley(moved_glassbox)" #]
 		printCurrentMessage
 		replyTo moveto with movetoanswer : movetoanswer(OK)
 		println("robot reached GLASSBOX")
 	}
 	Transition t0 whenRequest moveto -> handle_cmd
 					whenRequest pickup -> handle_cmd
 					whenRequest dropout -> handle_cmd
 					
 	State pickUp {
 		updateResource [# "transporttrolley(pickUp)" #]
 		printCurrentMessage
 		delay 1000
 		replyTo pickup with pickupanswer : pickupanswer(OK)
 		println("robot pickedUp")
 	}
 	Transition t0 whenRequest moveto -> handle_cmd
 					whenRequest pickup -> handle_cmd
 					whenRequest dropout -> handle_cmd
 	
 	State dropOut {
 		updateResource [# "transporttrolley(dropOut)" #]
 		printCurrentMessage
 		delay 1000
 		replyTo dropout with dropoutanswer : dropoutanswer(OK)
 		println("robot droppedOut")
 	}
 	Transition t0 whenRequest moveto -> handle_cmd
 					whenRequest pickup -> handle_cmd
 					whenRequest dropout -> handle_cmd
}
