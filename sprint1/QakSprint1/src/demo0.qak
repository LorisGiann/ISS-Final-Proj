//https://dl.bintray.com/jetbrains/kotlin/eclipse-plugin/0.8.19/

System demo0    
//mqttBroker "localhost" : 1883 eventTopic "demo0/events"
//mqttBroker "broker.hivemq.com" : 1883 eventTopic "demo0/events"
  
// ------------ wasteservice msgs --------------------
//MATERIAL = PLASTIC | GLASS
//TRUCKLOAD =  integer number
Request depositrequest : depositrequest(MATERIAL, TRUCKLOAD)
Reply loadaccepted     : loadaccepted(MATERIAL, TRUCKLOAD)
Reply loadrejected     : loadrejected(MATERIAL, TRUCKLOAD)
// ------------------------------------------------------
 
// ------------ transporttrolley msgs -------------------
//RESULT =  OK | ERROR 
Request pickup         : pickup(_)
Reply   pickupanswer   : pickupanswer(RESULT)
Request dropout        : dropout(_)
Reply   dropoutanswer  : dropoutanswer(RESULT)
Request move           : move(POSITION)    //INDOOR | PLASTICBOX | GLASSBOX | HOME
Reply   moveanswer     : moveanswer(RESULT)

/*Dispatch endMoveKo     : endMoveKo( V )
Request  cmd 		   : cmd(MOVE)
Reply    cmdanswer     : cmdanswer(RESULT)*/
// ------------------------------------------------------

// ------------------ basicrobot msgs -------------------
//MOVE =  w | a | s | d | h    //w and s are asyncronous
Dispatch cmd       	: cmd(MOVE)     
Dispatch end       	: end(ARG)
 
Request step       : step( TIME )	
Reply   stepdone   : stepdone(V)  
Reply   stepfail   : stepfail(DURATION, CAUSE)

Event   info       : info( ARG ) 	    //for external components, not coap-observed
Event  sonar       : sonar(DISTANCE,NAME)			//emitted by distancefilter
Dispatch obstacle  : obstacle( ARG ) 	//generated by distancefilter

//method to trigger the next transition within the state: send this message to the actor itself (cumbersome but works great)
Dispatch noMsg : noMsg(_)
// ------------------------------------------------------

// ------------------ CONTEXTS -------------------
//REMEMBER TO PUT datacleaner AND distancefilter IN THE SAME CONTEXT OF basicrobot
Context ctxserver ip [host="localhost" port=8095]
//Context ctxrobot ip  [host="127.0.0.1" port=8096]
// ------------------------------------------------


// ------- basicrobot collision detection ---------
//CodedQActor datacleaner    context ctxserver className "rx.dataCleaner"     //riceve e riemette messaggi sonarRobot per fare una primo filtraggio dei dati in arrivo da sonar reale
CodedQActor distancefilter context ctxserver className "rx.distanceFilter"   //Nel caso di robot virtuale semplicemente assorbe eventi obstacle e reinvia dispatch "obstacle:obstacle(virtual)" a basicrobot. Nel caso di robot reali riceve messaggi "sonarRobot" e invia a basicrobot dispatch "obstacle:obstacle(dist)" se vicino, altrimenti sonardata", "sonardata:distance(dist)" se lontano.
// ------------------------------------------------

QActor wasteservice context ctxserver{  
	[# 
		val MAXPB = 10
		val MAXGB = 10
		var contPB = 0
		var contGB = 0
		lateinit var Material  : String
		lateinit var TruckLoad : String
		lateinit var RES : String
		
		lateinit var TrolleyPos : String   //gbox,pbox,Home,indoor,other
		
		fun checkdepositpossible(MATERIAL:String,LOAD:String) : Boolean {
 				return (MATERIAL=="PLASTIC" && LOAD.toInt()+contPB<=MAXPB) 
 				 || (MATERIAL=="GLASS" && LOAD.toInt()+contGB<=MAXGB);
 		}
 				 
 		fun updateDeposit(MATERIAL:String,LOAD:String) : Unit {
 				when(MATERIAL){
				    "PLASTIC" -> contPB+=LOAD.toInt()
				    "GLASS" -> contGB+=LOAD.toInt()
				    else -> {
				        print("ERRORE MATERIALE")
					}
 				}
 		}
	#]
	
	State wait initial {
		printCurrentMessage	    
		discardMsg Off
		[# TrolleyPos = "home" #]
		updateResource [# "trolleyPos(home)" #]  
		println("Waiting for requests")
		//[# sysUtil.logMsgs=true #]
 	}
 	Transition t0 whenRequest depositrequest -> handle_req
 	
 	State handle_req {
		printCurrentMessage
		onMsg(depositrequest : depositrequest(MATERIAL, TRUCKLOAD)) {
			[#
				 Material 	= payloadArg(0) ;
				 TruckLoad 	= payloadArg(1) ;
			#]
			println("arrived $TruckLoad Kg of $Material")
			if[# checkdepositpossible( Material, TruckLoad ) #]{
				[# updateDeposit( Material, TruckLoad ) 
					#]
				println("PB capacity: ${contPB}, GB capacity: ${contGB}")	
				request transporttrolley -m move : move(INDOOR)
			} else{  
				replyTo depositrequest with loadrejected : loadrejected($Material,$TruckLoad)
				forward wasteservice -m noMsg : noMsg(_)
			}		
		} 
 	}
 	Transition t0 whenReply moveanswer -> handle_move_indoor
 				whenMsg noMsg -> wait
 	
 	State handle_move_indoor {
		printCurrentMessage
		onMsg(moveanswer : moveanswer(RESULT)) {
			[# RES = payloadArg(0); #]
			if[# RES == "OK" #]{
				println("wateservice - request pickup")
				updateResource [# "trolleyPos(indoor)" #]  
				request transporttrolley -m pickup : pickup(_)
			}else{
				forward wasteservice -m noMsg : noMsg(_)
			}
		}
 	}
 	Transition t0 whenReply pickupanswer -> handle_pickup_answer
 					whenMsg noMsg -> error
 	
 	State handle_pickup_answer{
 		printCurrentMessage
 		onMsg(pickupanswer : pickupanswer(RESULT)) {
			[# RES = payloadArg(0); #]
			if[# RES == "OK" #]{ 
				[# 
					lateinit var Position : String
					when(Material){
				    "PLASTIC" -> Position = "PLASTICBOX"
				    "GLASS" -> Position = "GLASSBOX"
				    else -> { // Note the block
				        print("ERRORE POSIZIONE")
				    }
				    //emit container_position : container_position(Material,TruckLoad)    ??
				} #]
				println("move to ${Position}")
				request transporttrolley -m move : move($Position)
				replyTo depositrequest with loadaccepted : loadaccepted($Material,$TruckLoad)
			}else{
				forward wasteservice -m noMsg : noMsg(_)
			}
		}
 	}
 	Transition t0 whenReply moveanswer -> handle_move_container
 					whenMsg noMsg -> error
 					
 	State handle_move_container{
 		printCurrentMessage
 		onMsg(moveanswer : moveanswer(RESULT)) {
			[# RES = payloadArg(0); #]
			if[# RES == "OK" #]{
				println("wateservice - request dropout ${Material}")
				if [# Material == "GLASS" #]{ updateResource [# "trolleyPos(gbox)" #]
				}else{ updateResource [# "trolleyPos(pbox)" #] }
				request transporttrolley -m dropout : dropout(_)
			}else{
				forward wasteservice -m noMsg : noMsg(_)
			}
		}
 	}
 	Transition t0 whenReply dropoutanswer -> handle_dropout_answer
 					whenMsg noMsg -> error
 					
 	State handle_dropout_answer {
 		printCurrentMessage
 		onMsg(dropoutanswer : dropoutanswer(RESULT)) {
			[# RES = payloadArg(0); #]
			if[# RES != "OK" #]{
				forward wasteservice -m noMsg : noMsg(_)
			}
		}
 	} 
 	Transition t0 whenTime 10 -> move_home
 					whenMsg noMsg and [# RES!="OK" #] -> error
 					whenRequest depositrequest -> handle_new_req
 	
 	State handle_new_req{ //simile ad handle_request, ma qui dobbiamo fare andare il robot a casa in caso di loadReqjected
		printCurrentMessage
		onMsg(depositrequest : depositrequest(MATERIAL, TRUCKLOAD)) {
			[#
				 Material 	= payloadArg(0) ;
				 TruckLoad 	= payloadArg(1) ;
			#]
			if[# checkdepositpossible( Material, TruckLoad ) #]{
				[# updateDeposit( Material, TruckLoad ) 
					#]
				println("PB capacity: ${contPB}, GB capacity: ${contGB}")	
				request transporttrolley -m move : move(INDOOR)
			} else{  
				replyTo depositrequest with loadrejected : loadrejected($Material,$TruckLoad)
				forward wasteservice -m noMsg : noMsg(_)
			}		
		}
 	}
 	Transition t0 whenReply moveanswer -> handle_move_indoor
 				whenMsg noMsg -> move_home
 	
 	State move_home{
 		printCurrentMessage
 		request transporttrolley -m move : move(HOME)
 	}
 	Goto handle_move_home
 	
 	State handle_move_home{
 		printCurrentMessage
 		onMsg(moveanswer : moveanswer(RESULT)) {
			[# RES = payloadArg(0); #]
			if[# RES == "OK" #]{
				updateResource [# "trolleyPos(home)" #]
				request transporttrolley -m dropout : dropout(_)
			}else{
				forward wasteservice -m noMsg : noMsg(_)
			}
		}
 	}
 	Transition t0 	whenRequest depositrequest -> handle_req //gestisci immediatamente nuova richiesta
 					whenMsg noMsg and [# RES!="OK" #] -> error
 					whenReply moveanswer -> wait
 	
 	State error {
 		println("error")
 		printCurrentMessage
 	}
}

QActor transporttrolley context ctxserver{
	[# var dest ="HOME"
	   var currpos = "HOME"
	   
	   fun newPosition(CURRPOS:String) : String {
 			if (CURRPOS=="HOME"){
 				return "INDOOR";
 			}
 			if (CURRPOS=="INDOOR"){
 				return "PLASTICBOX";
 			}
 			if (CURRPOS=="PLASTICBOX"){
 				return "GLASSBOX";
 			}
 			if (CURRPOS=="GLASSBOX"){
 				return "HOME";
 			}
 			return "ERRORE";
 		} 			
	   
	   #]
	
	State init initial { 	    
		discardMsg On
		[# dest = "HOME"
		   currpos = "HOME"	
		#]
		//println("Init trasport trolley")
		//[# sysUtil.logMsgs=true #]
 	}
 	Goto wait 
 	
 	State wait {
 		println("transporttrolley | Wait (Dest: ${dest} CurrPos: ${currpos})")
 		if [# currpos!=dest #] {
 			forward transporttrolley -m noMsg : noMsg(_)
 		}
 		updateResource [# "wait($currpos,$dest)" #]
 	}
 	Transition toNewState whenRequest pickup and [# currpos==dest#]-> picking_up
 						  whenRequest dropout and [# currpos==dest#]-> dropping_down
 						  whenRequest move and [# currpos==dest#] -> set_new_dest
 						  whenMsg noMsg -> forward_robot
 						  
 	State picking_up {
 		println("transporttrolley | PickUp material from truck")
 		updateResource [# "pickup()" #]
 		delay 1000
		replyTo pickup with pickupanswer : pickupanswer(OK)
 	}
 	Goto wait
 	
 	State dropping_down {
 		println("transporttrolley | DropOut material in container")
 		updateResource [# "dropdown()" #]
 		delay 1000
		replyTo dropout with dropoutanswer : dropoutanswer(OK)
 	}
 	Goto wait
 	
 	State set_new_dest {
 		onMsg( move:move(ARG) ){
			[# dest=payloadArg(0) #]
 			println("transporttrolley | New robot destination: ${dest}")
 		}
 	}
 	Goto wait
 	
 	State forward_robot {
 		//println("Forward robot")
 		forward basicrobot -m cmd : cmd(w)
 	}
 	Transition t1 whenEvent info -> turn
 	
 	State turn {
 		forward basicrobot -m cmd : cmd(l)
 		delay 450
 		[#currpos=newPosition(currpos) #]
 		if [# currpos==dest #] {
 			println("transporttrolley | Robot arrived at $currpos")
			replyTo move with moveanswer : moveanswer(OK)
		}/*else{
			println("transporttrolley | moving (now in $currpos)")
		}*/
 	}
 	Goto wait
 	
}



QActor basicrobot context ctxserver{
[#
  var StepTime      = 0L
  var StartTime     = 0L     
  var Duration      = 0L  
  var RobotType     = "" 
  var CurrentMove   = "unkknown"
#]  
 	State s0 initial { 	      
 		discardMsg Off  //WE want receive any msg
		println("basicrobot | START")	
 		qrun unibo.robot.robotSupport.create(myself,"basicrobotConfig.json")	
 		[# RobotType = unibo.robot.robotSupport.robotKind #]
 		/*delay 1000  //give to the realsonar the time to start
        if[# RobotType != "virtual" #]{
        	[# var robotsonar = context!!.hasActor("realsonar")  
        	   if(robotsonar != null) unibo.robot.robotSupport.createSonarPipe(robotsonar) 
        	#] 
  		}//The Virtual robot sonar is created in virtualrobotSupport2021*/
 
  		//run unibo.robot.robotSupport.move( "l" )    //synch
 		//run unibo.robot.robotSupport.move( "r" )	//synch
    		//run unibo.robot.robotSupport.move( "w" )    //asynch 
 		updateResource [# "basicrobot(start)" #]
 	} 
	Goto work
	
	State work{ 
		println("basicrobot | waiting .............. ")  
	} 
	Transition t1   whenMsg     cmd       -> execcmd
					whenRequest step      -> doStep			
					whenMsg    obstacle   -> handleObstacle  //in virtualrobot caused by the move w/s
					//whenEvent sonar       -> handleSonar
				  	whenMsg     end       -> endwork			  
	
	State execcmd{
		printCurrentMessage
		onMsg( cmd : cmd(MOVE) ){
  			//activate the motors
  			[# val Move = payloadArg(0) #]
  			println("basicrobot | executing '${Move}'")
			run unibo.robot.robotSupport.move( Move )
			updateResource [# "moveactivated(Move)" #]
		}
	 }
	 Goto work  
	 
	State handleObstacle{
		//println("basicrobot | handleObstacle")	
		run unibo.robot.robotSupport.move( "h" )
		delay 600
		//printCurrentMessage
		updateResource [# "obstacle(${CurrentMove})" #]
		/*if[# CurrentMove == "w"#]{
		//back to avoid emission of obstacle again if real robot moving forward !!!
		//if[# RobotType != "virtual" #]{	//is it better to embed this behavior in the support?
			run unibo.robot.robotSupport.move( "s" )
			delay 100 
			run unibo.robot.robotSupport.move( "h" ) 
 		}*/
 		emit info : info( obstacledoing(w) )
	}
	Goto work 
 
	/*State handleSonar{
		printCurrentMessage
	}
	Goto work*/
		
   	State doStep{ 
 		printCurrentMessage  
		onMsg( step : step( T ) ){  
			[#	StepTime = payloadArg(0).toLong() 	#]  
			updateResource [# "step(${StepTime})" #]
  		}  
        memoCurrentTime StartTime  
        println("basicrobot | doStep StepTime =$StepTime  ")        
        run unibo.robot.robotSupport.move( "w" )  //moves a real robot forever !!!
	}  
	Transition t0 
		whenTimeVar StepTime  -> stepDone  	 
 		whenMsg  obstacle     -> stepFail		
    	 
	
	State stepDone{   
 		run unibo.robot.robotSupport.move( "h" )  //stop the real robot already done ???
		updateResource [# "stepDone($StepTime)" #]
   		//emit info : info( stepdone($StepTime) )
   		replyTo step with stepdone : stepdone(ok)
		println("basicrobot | stepDone reply done")
  	}
	Goto work  
 
	State stepFail{  		
		setDuration Duration from StartTime
		run unibo.robot.robotSupport.move( "h" )  //stop the (real) robot
		[# var TunedDuration = Duration;  
			TunedDuration = Duration * 5 / 6
		#]
		println("basicrobot | stepFail duration=$Duration TunedDuration=$TunedDuration")
			run unibo.robot.robotSupport.move( "s" )
			delayVar TunedDuration 
			run unibo.robot.robotSupport.move( "h" ) 
 		updateResource [# "stepFail($Duration)" #] 
 		//emit info : info( stepFail($Duration) )
 		replyTo step with stepfail : stepfail($Duration, obst)
    }
	Goto work
	
	State endwork{ 
		updateResource [# "basicrobot(end)" #]	 		
 		terminate 1
	}   
 
}



//wasteservice TESTER
//TEST VETRO RIGETTATO E PLASTICA ACCETTATA, RICHIESTE SEQUENZIALE
/*
QActor testwasteservice context ctxserver{
	State s0 initial { 	    
		discardMsg On
		//[# sysUtil.logMsgs=true #]
		request wasteservice -m depositrequest : depositrequest(GLASS,11)
 	}
 	Transition t0 whenReply loadaccepted -> error
 					whenReply loadrejected -> s1
 	
 	State s1 {
 		println("load rejected successfully")
 		request wasteservice -m depositrequest : depositrequest(PLASTIC,3)
 	}
 	Transition t0 whenReply loadaccepted -> s2
 					whenReply loadrejected -> error
 	
 	State s2 {
 		println("load accepted successfully")
 	}
 	
 	State error {
 		println("errore")
 	}
}

//TEST PLASTICA ACCETTATA, PLASTICA RIGETTATA, SEQUENZIALI
/*QActor testwasteservice context ctxRPI{
	State s0 initial { 	    
		discardMsg On
		//[# sysUtil.logMsgs=true #]
		request wasteservice -m depositrequest : depositrequest(PLASTIC,9)
 	}
 	Transition t0 whenReply loadaccepted -> s1
 					whenReply loadrejected -> error
 	
 	State s1 {
 		println("load accepted successfully")
 		request wasteservice -m depositrequest : depositrequest(PLASTIC,2)
 	}
 	Transition t0 whenReply loadaccepted -> error
 					whenReply loadrejected -> s2
 	
 	State s2 {
 		println("load rejected successfully")
 	}
 	
 	State error {
 		println("errore")
 	}
}*/

