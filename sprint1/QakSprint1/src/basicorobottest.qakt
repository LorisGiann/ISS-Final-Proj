System  /* -trace  */   basicrobot
//mqttBroker "broker.hivemq.com" : 1883 eventTopic "unibo/basicrobot"   //broker.hivemq.com

Dispatch cmd       	: cmd(MOVE)     
Dispatch end       	: end(ARG)
 
Request step       : step( TIME )	
Reply   stepdone   : stepdone(V)  
Reply   stepfail   : stepfail(DURATION, CAUSE)

Event   info       : info( ARG ) 	    //for external components, not coap-observed
Event  sonar       : sonar(DISTANCE,NAME)			//emitted by distancefilter
Dispatch obstacle  : obstacle( ARG ) 	//generated by distancefilter

 
Context ctxbasicrobot ip [host="localhost" port=8020]  

//CodedQActor datacleaner    context ctxbasicrobot className "rx.dataCleaner"     //riceve e riemette messaggi sonarRobot per fare una primo filtraggio dei dati in arrivo da sonar reale
CodedQActor distancefilter context ctxbasicrobot className "rx.distanceFilter"   //Nel caso di robot virtuale semplicemente assorbe eventi obstacle e reinvia dispatch "obstacle:obstacle(virtual)" a basicrobot. Nel caso di robot reali riceve messaggi "sonarRobot" e invia a basicrobot dispatch "obstacle:obstacle(dist)" se vicino, altrimenti sonardata", "sonardata:distance(dist)" se lontano.

QActor commander context ctxbasicrobot{
	State s0 initial { 
		forward basicrobot -m cmd : cmd(w)
	}
	Transition t0  whenEvent  info  -> s1	
	
	State s1 {
		forward basicrobot -m cmd : cmd(l)
		forward basicrobot -m cmd : cmd(w)
	}
	Transition t0  whenEvent  info  -> s2
	
	State s2 {
		//forward basicrobot -m cmd : cmd(h)
		forward basicrobot -m cmd : cmd(l)
		forward basicrobot -m cmd : cmd(w)
		println("done")
	}
}


QActor basicrobot context ctxbasicrobot{
[#
  var StepTime      = 0L
  var StartTime     = 0L     
  var Duration      = 0L  
  var RobotType     = "" 
  var CurrentMove   = "unkknown"
#]  
 	State s0 initial { 	      
 		discardMsg Off  //WE want receive any msg
		println("basicrobot | START")	
 		qrun unibo.robot.robotSupport.create(myself,"basicrobotConfig.json")	
 		[# RobotType = unibo.robot.robotSupport.robotKind #]
 		/*delay 1000  //give to the realsonar the time to start
        if[# RobotType != "virtual" #]{
        	[# var robotsonar = context!!.hasActor("realsonar")  
        	   if(robotsonar != null) unibo.robot.robotSupport.createSonarPipe(robotsonar) 
        	#] 
  		}//The Virtual robot sonar is created in virtualrobotSupport2021*/
 
  		run unibo.robot.robotSupport.move( "l" )    //synch
 		run unibo.robot.robotSupport.move( "r" )	//synch
    		//run unibo.robot.robotSupport.move( "w" )    //asynch
 		updateResource [# "basicrobot(start)" #]
 	} 
	Goto work
	
	State work{ 
		println("basicrobot  | waiting .................. ")  
	} 
	Transition t1   whenMsg     cmd       -> execcmd
					whenRequest step      -> doStep			
					whenMsg    obstacle   -> handleObstacle  //in virtualrobot caused by the move w/s
					//whenEvent sonar       -> handleSonar
				  	whenMsg     end       -> endwork			  
	
	State execcmd{
		printCurrentMessage
		onMsg( cmd : cmd(MOVE) ){
  			//activate the motors
  			[# val Move = payloadArg(0) #]
  			println("execute ${Move}")
			run unibo.robot.robotSupport.move( Move )
			updateResource [# "moveactivated(Move)" #]
		}
	 }
	 Goto work  
	 
	State handleObstacle{
		//println("basicrobot | handleObstacle")	
		run unibo.robot.robotSupport.move( "h" )
		delay 600
		//printCurrentMessage
		updateResource [# "obstacle(${CurrentMove})" #]
		/*if[# CurrentMove == "w"#]{
		//back to avoid emission of obstacle again if real robot moving forward !!!
		//if[# RobotType != "virtual" #]{	//is it better to embed this behavior in the support?
			run unibo.robot.robotSupport.move( "s" )
			delay 100 
			run unibo.robot.robotSupport.move( "h" ) 
 		}*/
 		emit info : info( obstacledoing(w) )
	}
	Goto work 
 
	/*State handleSonar{
		printCurrentMessage
	}
	Goto work*/
		
   	State doStep{ 
 		printCurrentMessage  
		onMsg( step : step( T ) ){  
			[#	StepTime = payloadArg(0).toLong() 	#]  
			updateResource [# "step(${StepTime})" #]
  		}  
        memoCurrentTime StartTime  
        println("basicrobot | doStep StepTime =$StepTime  ")        
        run unibo.robot.robotSupport.move( "w" )  //moves a real robot forever !!!
	}  
	Transition t0 
		whenTimeVar StepTime  -> stepDone  	 
 		whenMsg  obstacle     -> stepFail		
    	 
	
	State stepDone{   
 		run unibo.robot.robotSupport.move( "h" )  //stop the real robot already done ???
		updateResource [# "stepDone($StepTime)" #]
   		//emit info : info( stepdone($StepTime) )
   		replyTo step with stepdone : stepdone(ok)
		println("basicrobot | stepDone reply done")
  	}
	Goto work  
 
	State stepFail{  		
		setDuration Duration from StartTime
		run unibo.robot.robotSupport.move( "h" )  //stop the (real) robot
		[# var TunedDuration = Duration;  
			TunedDuration = Duration * 5 / 6
		#]
		println("basicrobot | stepFail duration=$Duration TunedDuration=$TunedDuration")
			run unibo.robot.robotSupport.move( "s" )
			delayVar TunedDuration 
			run unibo.robot.robotSupport.move( "h" ) 
 		updateResource [# "stepFail($Duration)" #] 
 		//emit info : info( stepFail($Duration) )
 		replyTo step with stepfail : stepfail($Duration, obst)
    }
	Goto work
	
	State endwork{ 
		updateResource [# "basicrobot(end)" #]	 		
 		terminate 1
	}   
 
}