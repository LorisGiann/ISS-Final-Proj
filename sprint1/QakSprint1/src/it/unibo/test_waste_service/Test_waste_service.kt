/* Generated by AN DISI Unibo */ 
package it.unibo.test_waste_service

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Test_waste_service ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						discardMessages = true
						request("depositrequest", "depositrequest(glass,11)" ,"waste_service" )  
					}
					 transition(edgeName="t021",targetState="error",cond=whenReply("loadaccept"))
					transition(edgeName="t022",targetState="s1",cond=whenReply("loadrejected"))
				}	 
				state("s1") { //this:State
					action { //it:State
						println("load rejected successfully")
						request("depositrequest", "depositrequest(plastic,3)" ,"waste_service" )  
					}
					 transition(edgeName="t023",targetState="s2",cond=whenReply("loadaccept"))
					transition(edgeName="t024",targetState="error",cond=whenReply("loadrejected"))
				}	 
				state("s2") { //this:State
					action { //it:State
						println("load accepted successfully")
					}
				}	 
				state("error") { //this:State
					action { //it:State
						println("errore")
					}
				}	 
			}
		}
}
