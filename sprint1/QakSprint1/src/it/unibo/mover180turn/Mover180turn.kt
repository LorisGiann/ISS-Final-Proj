/* Generated by AN DISI Unibo */ 
package it.unibo.mover180turn

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Mover180turn ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "wait"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		 lateinit var RES : String     
		return { //this:ActionBasciFsm
				state("wait") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						updateResourceRep( "mover180turn(wait)"  
						)
					}
					 transition(edgeName="t039",targetState="req_turn_1",cond=whenRequest("mover180turn"))
				}	 
				state("req_turn_1") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						updateResourceRep( "mover180turn(req_turn_1)"  
						)
						request("cmdsync", "cmdsync(l)" ,"basicrobotwrapper" )  
					}
					 transition(edgeName="t040",targetState="chk_turn_1",cond=whenReply("cmdanswer"))
				}	 
				state("chk_turn_1") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						updateResourceRep( "mover180turn(chk_turn_1)"  
						)
						if( checkMsgContent( Term.createTerm("cmdanswer(RESULT)"), Term.createTerm("cmdanswer(RES)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 RES = payloadArg(0) 
						}
					}
					 transition( edgeName="goto",targetState="req_turn_2", cond=doswitchGuarded({ RES=="OK"  
					}) )
					transition( edgeName="goto",targetState="error", cond=doswitchGuarded({! ( RES=="OK"  
					) }) )
				}	 
				state("req_turn_2") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						updateResourceRep( "mover180turn(req_turn_2)"  
						)
						request("cmdsync", "cmdsync(l)" ,"basicrobotwrapper" )  
					}
					 transition(edgeName="t041",targetState="chk_turn_2",cond=whenReply("cmdanswer"))
				}	 
				state("chk_turn_2") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						updateResourceRep( "mover180turn(chk_turn_2)"  
						)
						if( checkMsgContent( Term.createTerm("cmdanswer(RESULT)"), Term.createTerm("cmdanswer(RES)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 RES = payloadArg(0) 
						}
					}
					 transition( edgeName="goto",targetState="reply", cond=doswitchGuarded({ RES=="OK"  
					}) )
					transition( edgeName="goto",targetState="error", cond=doswitchGuarded({! ( RES=="OK"  
					) }) )
				}	 
				state("reply") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						answer("mover180turn", "mover180turnanswer", "mover180turnanswer(OK)"   )  
						updateResourceRep( "mover180turn(reply)"  
						)
					}
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
				state("error") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						updateResourceRep( "mover180turn(error)"  
						)
						answer("mover180turn", "mover180turnanswer", "mover180turnanswer(ERROR)"   )  
						println("mover180turn | ERROR STATE")
					}
				}	 
			}
		}
}
