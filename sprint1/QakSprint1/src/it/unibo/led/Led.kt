/* Generated by AN DISI Unibo */ 
package it.unibo.led

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Led ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		 lateinit var newState : String  
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						discardMessages = true
					}
					 transition(edgeName="t00",targetState="handle_update",cond=whenEvent("update_led"))
				}	 
				state("handle_update") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("update_led(STATE)"), Term.createTerm("update_led(ARG)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 newState = payloadArg(0)  
								println("update_led(${newState})")
								forward("noMsg", "noMsg(_)" ,"led" ) 
						}
					}
					 transition(edgeName="toOff1",targetState="off",cond=whenDispatchGuarded("noMsg",{ newState=="off"  
					}))
				}	 
				state("off") { //this:State
					action { //it:State
						println("Led off")
					}
					 transition(edgeName="t02",targetState="handle_update",cond=whenEvent("update_led"))
				}	 
			}
		}
}
