/* Generated by AN DISI Unibo */ 
package it.unibo.transporttrolley

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Transporttrolley ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "init"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		 var dest = ws.Position.HOME
			   var currpos = ws.Position.HOME
		return { //this:ActionBasciFsm
				state("init") { //this:State
					action { //it:State
						discardMessages = true
						 dest = ws.Position.HOME
							       currpos = ws.Position.HOME
					}
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
				state("wait") { //this:State
					action { //it:State
						updateResourceRep( "transporttrolley(wait,$currpos,$dest)"  
						)
						println("transporttrolley | Wait (Dest: ${dest} CurrPos: ${currpos})")
						if(  currpos!=dest  
						 ){forward("noMsg", "noMsg(_)" ,"transporttrolley" ) 
						}
					}
					 transition(edgeName="toNewState18",targetState="picking_up",cond=whenRequestGuarded("pickup",{ currpos==dest 
					}))
					transition(edgeName="toNewState19",targetState="dropping_down",cond=whenRequestGuarded("dropout",{ currpos==dest 
					}))
					transition(edgeName="toNewState20",targetState="set_new_dest",cond=whenRequestGuarded("move",{ currpos==dest 
					}))
					transition(edgeName="toNewState21",targetState="forward_robot",cond=whenDispatch("noMsg"))
				}	 
				state("picking_up") { //this:State
					action { //it:State
						updateResourceRep( "transporttrolley(picking_up,$currpos,$dest)"  
						)
						println("transporttrolley | PickUp material from truck")
						delay(1000) 
						answer("pickup", "pickupanswer", "pickupanswer(OK)"   )  
					}
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
				state("dropping_down") { //this:State
					action { //it:State
						updateResourceRep( "transporttrolley(dropping_down,$currpos,$dest)"  
						)
						println("transporttrolley | DropOut material in container")
						delay(1000) 
						answer("dropout", "dropoutanswer", "dropoutanswer(OK)"   )  
					}
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
				state("set_new_dest") { //this:State
					action { //it:State
						updateResourceRep( "transporttrolley(set_new_dest,$currpos,$dest)"  
						)
						if( checkMsgContent( Term.createTerm("move(POSITION)"), Term.createTerm("move(ARG)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 dest=ws.Position.valueOf(payloadArg(0))  
								println("transporttrolley | New robot destination: ${dest}")
						}
					}
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
				state("forward_robot") { //this:State
					action { //it:State
						updateResourceRep( "transporttrolley(forward_robot,$currpos,$dest)"  
						)
						forward("cmd", "cmd(w)" ,"basicrobot" ) 
					}
					 transition(edgeName="t122",targetState="turn",cond=whenEvent("info"))
				}	 
				state("turn") { //this:State
					action { //it:State
						updateResourceRep( "transporttrolley(turn,$currpos,$dest)"  
						)
						forward("cmd", "cmd(l)" ,"basicrobot" ) 
						delay(450) 
						currpos=ws.func.nextPosition(currpos)  
						if(  currpos==dest  
						 ){println("transporttrolley | Robot arrived at $currpos")
						answer("move", "moveanswer", "moveanswer(OK)"   )  
						}
					}
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
			}
		}
}
