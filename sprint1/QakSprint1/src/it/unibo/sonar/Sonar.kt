/* Generated by AN DISI Unibo */ 
package it.unibo.sonar

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Sonar ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "wait"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		 lateinit var distance : int 
				val DLIMIT = 10
		return { //this:ActionBasciFsm
				state("wait") { //this:State
					action { //it:State
						discardMessages = true
					}
					 transition(edgeName="t017",targetState="handle_update_moving",cond=whenEvent("update_sonar"))
				}	 
				state("handle_update_moving") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("update_sonar(DISTANCE)"), Term.createTerm("update_sonar(DISTANCE)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 distance = payloadArg(0)  
								println("update_sonar(${newState})")
								if( distance<DLIMIT 
								 ){println("Stop robot")
								forward("stop", "stop(_)" ,"transporttrolley" ) 
								}
						}
					}
					 transition( edgeName="goto",targetState="wait", cond=doswitchGuarded({distance>=DLIMIT 
					}) )
					transition( edgeName="goto",targetState="stop", cond=doswitchGuarded({! (distance>=DLIMIT 
					) }) )
				}	 
				state("stop") { //this:State
					action { //it:State
					}
					 transition(edgeName="t018",targetState="update_sonar_resuming",cond=whenEvent("update_sonar"))
				}	 
				state("update_sonar_resuming") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("update_sonar(DISTANCE)"), Term.createTerm("update_sonar(DISTANCE)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 distance = payloadArg(0)  
								println("update_sonar(${newState})")
								if( distance>=DLIMIT 
								 ){println("Resume robot")
								forward("resume", "resume(_)" ,"transporttrolley" ) 
								}
						}
					}
					 transition( edgeName="goto",targetState="wait", cond=doswitchGuarded({distance>=DLIMIT 
					}) )
					transition( edgeName="goto",targetState="stop", cond=doswitchGuarded({! (distance>=DLIMIT 
					) }) )
				}	 
			}
		}
}
