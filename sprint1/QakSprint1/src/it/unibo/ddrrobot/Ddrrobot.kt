/* Generated by AN DISI Unibo */ 
package it.unibo.ddrrobot

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Ddrrobot ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "init"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		lateinit var move : String
			   var RobotType     = ""  
		return { //this:ActionBasciFsm
				state("init") { //this:State
					action { //it:State
						discardMessages = true
						println("Init ddrrobot")
						unibo.robot.robotSupport.create(myself ,"basicrobotConfig.json" )
						 RobotType = unibo.robot.robotSupport.robotKind  
						delay(1000) 
						if(  RobotType != "virtual"  
						 ){ var robotsonar = context!!.hasActor("realsonar")  
						        	   unibo.robot.robotSupport.createSonarPipe(myself) 
						}
					}
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
				state("wait") { //this:State
					action { //it:State
						discardMessages = true
					}
					 transition(edgeName="t023",targetState="handle_moving",cond=whenRequest("cmd"))
				}	 
				state("handle_moving") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("cmd(MOVE)"), Term.createTerm("cmd(MOVE)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 move = payloadArg(0)  
								if( move=="w" 
								 ){println("cmd move(${move})")
								unibo.robot.robotSupport.move( "w"  )
								}
								if( move=="l" 
								 ){println("cmd move(${move})")
								unibo.robot.robotSupport.move( "l"  )
								delay(350) 
								forward("noMsg", "noMsg(_)" ,"ddrrobot" ) 
								}
						}
					}
					 transition(edgeName="t124",targetState="handle_answer",cond=whenDispatch("obstacle"))
					transition(edgeName="t125",targetState="handle_answer",cond=whenDispatch("noMsg"))
				}	 
				state("handle_answer") { //this:State
					action { //it:State
						unibo.robot.robotSupport.move( "h"  )
						answer("cmd", "cmdanswer", "cmdanswer(OK)"   )  
					}
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
			}
		}
}
