/* Generated by AN DISI Unibo */ 
package it.unibo.guiserver

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Guiserver ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "wait"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		val interruptedStateTransitions = mutableListOf<Transition>()
			var ttState = ws.Transporttrolleystate.IDLE
				var position = ws.Position.HOME
				var plasticCont = 0.0F
				var glassCont = 0.0F
				var ledState = ws.LedState.OFF
				
				val actor = this@Guiserver;
				suspend fun transitNow(stateName : String){
					var res = actor.handleCurrentMessage(NoMsg,actor.getStateByName(stateName));
					if(res) actor.elabMsgInState( );
					else println("ERROR: transition was not possible")
				}
		return { //this:ActionBasciFsm
				state("wait") { //this:State
					action { //it:State
						discardMessages = false
						println("$name in ${currentState.stateName} | $currentMsg")
						updateResourceRep( "gui(wait,${ttState},${position},${ledState},${plasticCont},${glassCont})"  
						)
					}
					 transition(edgeName="t010",targetState="handle_update_tt_state",cond=whenEvent("update_tt_state"))
					transition(edgeName="t011",targetState="handle_update_position",cond=whenEvent("update_position"))
					transition(edgeName="t012",targetState="handle_update_container",cond=whenEvent("update_container"))
					transition(edgeName="t013",targetState="handle_update_led",cond=whenEvent("update_led"))
				}	 
				state("handle_update_tt_state") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						if( checkMsgContent( Term.createTerm("update_tt_state(TTSTATE)"), Term.createTerm("update_tt_state(ARG)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 ttState = ws.Transporttrolleystate.valueOf(payloadArg(0))  
						}
						updateResourceRep( "gui(handle_update_tt_state,${ttState},${position},${ledState},${plasticCont},${glassCont})"  
						)
					}
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
				state("handle_update_position") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						if( checkMsgContent( Term.createTerm("update_position(POSITION)"), Term.createTerm("update_position(ARG)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 position = ws.Position.valueOf(payloadArg(0))  
						}
						updateResourceRep( "gui(handle_update_position,${ttState},${position},${ledState},${plasticCont},${glassCont})"  
						)
					}
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
				state("handle_update_container") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						if( checkMsgContent( Term.createTerm("update_position(POSITION)"), Term.createTerm("update_position(PLASTIC,GLASS)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 plasticCont = payloadArg(0).toFloat()
												glassCont = payloadArg(1).toFloat()  
						}
						updateResourceRep( "gui(handle_update_container,${ttState},${position},${ledState},${plasticCont},${glassCont})"  
						)
					}
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
				state("handle_update_led") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						if( checkMsgContent( Term.createTerm("update_position(POSITION)"), Term.createTerm("update_position(ARG)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 ledState = ws.LedState.valueOf(payloadArg(0))  
						}
						updateResourceRep( "gui(handle_update_led,${ttState},${position},${ledState},${plasticCont},${glassCont})"  
						)
					}
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
			}
		}
}
